;;
;; IDLWAVE catalog for library JHU_APL_IDLUSR
;; Automatically Generated -- do not edit.
;; Created by idlwave_catalog on Thu Oct 21 09:24:57 2004
;;
(setq idlwave-library-catalog-libname "JHU_APL_IDLUSR")
(setq idlwave-library-catalog-routines
 '(("strarr2byt" pro nil (lib "strarr2byt.pro" nil "JHU_APL_IDLUSR") "%s, tarr, barr" (nil ("help")))
   ("byt2strarr" pro nil (lib "byt2strarr.pro" nil "JHU_APL_IDLUSR") "%s, barr, tarr" (nil ("help")))
   ("unpack12" fun nil (lib "unpack12.pro" nil "JHU_APL_IDLUSR") "Result = %s(bb0)" (nil ("error") ("help")))
   ("bytarr_put" pro nil (lib "bytarr_put.pro" nil "JHU_APL_IDLUSR") "%s, b, in" (nil ("address") ("help") ("index")))
   ("bytarr_get" pro nil (lib "bytarr_get.pro" nil "JHU_APL_IDLUSR") "%s, b, out" (nil ("help") ("index")))
   ("webcaltab" pro nil (lib "webcaltab.pro" nil "JHU_APL_IDLUSR") "%s, mon, yr" (nil ("border") ("code") ("fsize") ("help") ("links") ("status") ("title")))
   ("gif2jpeg" pro nil (lib "gif2jpeg.pro" nil "JHU_APL_IDLUSR") "%s, file" (nil ("help") ("jpeg") ("mag") ("qf")))
   ("pmod" fun nil (lib "pmod.pro" nil "JHU_APL_IDLUSR") "Result = %s(in, m)" (nil ("help")))
   ("fixangh" fun nil (lib "fixangh.pro" nil "JHU_APL_IDLUSR") "Result = %s(in, delta)" (nil ("help")))
   ("symasym" pro nil (lib "symasym.pro" nil "JHU_APL_IDLUSR") "%s, in, sym, asym" (nil ("help") ("x") ("y")))
   ("dt_tm_fromcr" fun nil (lib "dt_tm_fromcr.pro" nil "JHU_APL_IDLUSR") "Result = %s(carr0)" (nil ("help") ("js")))
   ("dt_tm_tocr" fun nil (lib "dt_tm_tocr.pro" nil "JHU_APL_IDLUSR") "Result = %s(dt_tm)" (nil ("help")))
   ("dms2d" fun nil (lib "dms2d.pro" nil "JHU_APL_IDLUSR") "Result = %s(in0)" (nil ("help")))
   ("shiftf" fun nil (lib "shiftf.pro" nil "JHU_APL_IDLUSR") "Result = %s(a, dx, dy)" (nil ("help")))
   ("makenxy" pro nil (lib "makenxy.pro" nil "JHU_APL_IDLUSR") "%s, x1, x2, nx, y1, y2, ny, xa, ya" (nil ("help")))
   ("thplot" pro nil (lib "thplot.pro" nil "JHU_APL_IDLUSR") "%s, x0, y0" (nil ("_extra") ("cback") ("cclip") ("ccolor") ("cstyle") ("cthick") ("fill") ("help")))
   ("js2weekday" fun nil (lib "js2weekday.pro" nil "JHU_APL_IDLUSR") "Result = %s(js)" (nil ("help") ("name")))
   ("fslider_setrange" pro nil (lib "fslider_setrange.pro" nil "JHU_APL_IDLUSR") "%s, id, min, max, val" (nil ("help")))
   ("tetc" pro nil (lib "tetc.pro" nil "JHU_APL_IDLUSR") "%s" (nil))
   ("xline" pro nil (lib "xline.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("data") ("device") ("help") ("normal") ("start") ("stop")))
   ("makes" fun nil (lib "makes.pro" nil "JHU_APL_IDLUSR") "Result = %s(lo, hi, st)" (nil ("digits") ("help")))
   ("put_scale" pro nil (lib "put_scale.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("help") ("ix") ("iy") ("log") ("noembed") ("text") ("type_x") ("type_y") ("x") ("y")))
   ("set_scale" pro nil (lib "set_scale.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("error") ("help") ("image") ("ix1") ("ix2") ("iy1") ("iy2") ("list") ("noset") ("nx") ("ny") ("quiet") ("x1") ("x2") ("y1") ("y2")))
   ("clr_scale" pro nil (lib "clr_scale.pro" nil "JHU_APL_IDLUSR") "%s, img" (nil ("help")))
   ("ellfit" pro nil (lib "ellfit.pro" nil "JHU_APL_IDLUSR") "%s, pd, xm, ym, ang, ecc, a, b" (nil ("help")))
   ("genellipse" pro nil (lib "genellipse.pro" nil "JHU_APL_IDLUSR") "%s, xm, ym, ang, a, b, x, y" (nil ("help")))
   ("xmer_gen" pro nil (lib "xmerge.pro" nil "JHU_APL_IDLUSR") "%s, m" (nil))
   ("xmer_tv" pro nil (lib "xmerge.pro" nil "JHU_APL_IDLUSR") "%s, img, x, y" (nil ("trans")))
   ("xmer_bkg" pro nil (lib "xmerge.pro" nil "JHU_APL_IDLUSR") "%s, m" (nil ("hsv") ("rgb")))
   ("xmer_rdimg" pro nil (lib "xmerge.pro" nil "JHU_APL_IDLUSR") "%s, f, typ, a, r, g, b" (nil ("error")))
   ("xmer_add" pro nil (lib "xmerge.pro" nil "JHU_APL_IDLUSR") "%s, tin, m" (nil ("trans") ("type")))
   ("xmer_restore" pro nil (lib "xmerge.pro" nil "JHU_APL_IDLUSR") "%s, file, m" (nil))
   ("xmer_rescale" pro nil (lib "xmerge.pro" nil "JHU_APL_IDLUSR") "%s, m, sf, i" (nil))
   ("xmer_maxscale" pro nil (lib "xmerge.pro" nil "JHU_APL_IDLUSR") "%s, m" (nil))
   ("xmer_boxes" pro nil (lib "xmerge.pro" nil "JHU_APL_IDLUSR") "%s, m" (nil))
   ("xmer_update" pro nil (lib "xmerge.pro" nil "JHU_APL_IDLUSR") "%s, m" (nil))
   ("xmer_imageorder" pro nil (lib "xmerge.pro" nil "JHU_APL_IDLUSR") "%s, in, m" (nil))
   ("xmer_findi" fun nil (lib "xmerge.pro" nil "JHU_APL_IDLUSR") "Result = %s(x, y, m)" (nil))
   ("xmer_count" pro nil (lib "xmerge.pro" nil "JHU_APL_IDLUSR") "%s, m" (nil))
   ("xmer_image" pro nil (lib "xmerge.pro" nil "JHU_APL_IDLUSR") "%s, x, y, dx, dy, m" (nil))
   ("xmer_window" pro nil (lib "xmerge.pro" nil "JHU_APL_IDLUSR") "%s, m" (nil))
   ("xmerge_event" pro nil (lib "xmerge.pro" nil "JHU_APL_IDLUSR") "%s, ev" (nil))
   ("xmerge" pro nil (lib "xmerge.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("debug") ("directory") ("help")))
   ("pickfile2" fun nil (lib "pickfile2.pro" nil "JHU_APL_IDLUSR") "Result = %s" (nil ("_extra") ("get_path") ("help")))
   ("getstr" fun nil (lib "getstr.pro" nil "JHU_APL_IDLUSR") "Result = %s(txt)" (nil ("help")))
   ("ticklen" pro nil (lib "ticklen.pro" nil "JHU_APL_IDLUSR") "%s, x1, y1, x2, y2" (nil ("device") ("help") ("position")))
   ("movlabels" pro nil (lib "movlabels.pro" nil "JHU_APL_IDLUSR") "%s, x0, y0, lab" (nil ("charsize") ("data") ("device") ("flag") ("font") ("help") ("inflag") ("lx") ("ly") ("normal") ("radius") ("x_orig") ("y_orig")))
   ("prwindow2" pro nil (lib "prwindow.pro" nil "JHU_APL_IDLUSR") "%s, pnum, a, r, g, b" (nil ("charsize") ("comment") ("factor")))
   ("prwindow" pro nil (lib "prwindow.pro" nil "JHU_APL_IDLUSR") "%s, pnum" (nil ("charsize") ("comment") ("factor") ("four") ("gif") ("help") ("two")))
   ("whoami" pro nil (lib "whoami.pro" nil "JHU_APL_IDLUSR") "%s, dir, file" (nil ("help") ("line")))
   ("izoom_sub" pro nil (lib "izoom_sub.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("charsize") ("color") ("help") ("scale") ("xmar1") ("xmar2") ("xtitle") ("ymar1") ("ymar2") ("ytitle")))
   ("event_log_new" pro nil (lib "event_log.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("dir") ("file") ("setfile")))
   ("event_log" pro nil (lib "event_log.pro" nil "JHU_APL_IDLUSR") "%s, text" (nil ("add") ("difference") ("directory") ("file") ("help") ("list") ("log") ("new") ("screen") ("setfile") ("tag") ("twoline") ("value")))
   ("filljumps" pro nil (lib "filljumps.pro" nil "JHU_APL_IDLUSR") "%s, v, t, in" (nil ("help")))
   ("web_back" pro nil (lib "web_back.pro" nil "JHU_APL_IDLUSR") "%s, h, s, v" (nil ("help") ("smooth")))
   ("tiff2jpeg" pro nil (lib "tiff2jpeg.pro" nil "JHU_APL_IDLUSR") "%s, file" (nil ("help") ("qf")))
   ("jpeg2tiff8" pro nil (lib "jpeg2tiff8.pro" nil "JHU_APL_IDLUSR") "%s, file" (nil ("help")))
   ("gifscreen" pro nil (lib "gifscreen.pro" nil "JHU_APL_IDLUSR") "%s, file" (nil ("help")))
   ("setwin_event" pro nil (lib "setwin.pro" nil "JHU_APL_IDLUSR") "%s, ev" (nil))
   ("setwin" pro nil (lib "setwin.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("error") ("help")))
   ("imgneg" pro nil (lib "imgneg.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("help")))
   ("data_block" pro nil (lib "data_block.pro" nil "JHU_APL_IDLUSR") "%s, out" (nil ("check") ("help")))
   ("whocalledme" pro nil (lib "whocalledme.pro" nil "JHU_APL_IDLUSR") "%s, dir, file" (nil ("back") ("help") ("line")))
   ("showpath" pro nil (lib "showpath.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("help") ("routine")))
   ("lint" pro nil (lib "lint.pro" nil "JHU_APL_IDLUSR") "%s, a, b, c, d, i1, i2" (nil ("cond") ("flag") ("help")))
   ("getkey" fun nil (lib "getkey.pro" nil "JHU_APL_IDLUSR") "Result = %s" (nil ("help") ("initialize")))
   ("upcase1" fun nil (lib "upcase1.pro" nil "JHU_APL_IDLUSR") "Result = %s(txt)" (nil ("help")))
   ("inbox" fun nil (lib "inbox.pro" nil "JHU_APL_IDLUSR") "Result = %s(x, y, x1, x2, y1, y2)" (nil ("help")))
   ("ADD_MARGIN" pro nil (lib "add_margin.pro" nil "JHU_APL_IDLUSR") "%s, IN, OUT, N_LEFT, N_TOP" (nil ("help")))
   ("subimg" pro nil (lib "subimg.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("ex") ("help") ("x") ("y")))
   ("update" pro nil (lib "xtextfile.pro" nil "JHU_APL_IDLUSR") "%s, map" (nil))
   ("xtextfile_event" pro nil (lib "xtextfile.pro" nil "JHU_APL_IDLUSR") "%s, ev" (nil))
   ("xtextfile" pro nil (lib "xtextfile.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("help") ("maxbuff")))
   ("numpersec" fun nil (lib "numpersec.pro" nil "JHU_APL_IDLUSR") "Result = %s(num)" (nil ("delta") ("help")))
   ("outbox" fun nil (lib "outbox.pro" nil "JHU_APL_IDLUSR") "Result = %s(x, y, x1, x2, y1, y2)" (nil ("expand") ("help")))
   ("swap" pro nil (lib "swap.pro" nil "JHU_APL_IDLUSR") "%s, a, b" (nil ("help")))
   ("box2b_stat" pro nil (lib "box2b.pro" nil "JHU_APL_IDLUSR") "%s, x1, x2, y1, y2" (nil ("fact") ("nid") ("yrev")))
   ("box2b" pro nil (lib "box2b.pro" nil "JHU_APL_IDLUSR") "%s, x10, x20, y10, y20" (nil ("ch_details") ("ch_flag") ("ch_opts") ("ch_vals") ("change") ("ctext") ("exitcode") ("fact") ("help") ("info") ("lock") ("menu") ("nomenu") ("status") ("xmode") ("yrev")))
   ("animals" fun nil (lib "animals.pro" nil "JHU_APL_IDLUSR") "Result = %s" (nil ("help")))
   ("d2dms" fun nil (lib "d2dms.pro" nil "JHU_APL_IDLUSR") "Result = %s(a0)" (nil ("digits") ("fraction") ("help") ("nodeg")))
   ("screentiff" pro nil (lib "screentiff.pro" nil "JHU_APL_IDLUSR") "%s, file" (nil ("help")))
   ("setcolor" pro nil (lib "setcolor.pro" nil "JHU_APL_IDLUSR") "%s, clr, indx" (nil ("brightness") ("help")))
   ("APODIZE" fun nil (lib "apodize.pro" nil "JHU_APL_IDLUSR") "Result = %s(W, R)" (nil ("help")))
   ("arcs" pro nil (lib "arcs.pro" nil "JHU_APL_IDLUSR") "%s, r, a1, a2, xx, yy" (nil ("color") ("data") ("device") ("help") ("linestyle") ("noclip") ("norm") ("thickness")))
   ("arrow2" pro nil (lib "arrow2.pro" nil "JHU_APL_IDLUSR") "%s, xt, yt, xh, yh" (nil ("color") ("data") ("device") ("fill") ("help") ("length") ("linestyle") ("norm") ("shaft") ("thick") ("width")))
   ("best_fft" fun nil (lib "best_fft.pro" nil "JHU_APL_IDLUSR") "Result = %s(n0)" (nil ("delta") ("down") ("help") ("percent")))
   ("bell" pro nil (lib "bell.pro" nil "JHU_APL_IDLUSR") "%s, n" (nil ("help")))
   ("BLEND" fun nil (lib "blend.pro" nil "JHU_APL_IDLUSR") "Result = %s(N, I1, I2)" (nil ("help")))
   ("tvsharp" pro nil (lib "tvsharp.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("help") ("smooth") ("weight")))
   ("BINBOUND" fun nil (lib "binbound.pro" nil "JHU_APL_IDLUSR") "Result = %s(B)" (nil ("help")))
   ("date2dn" fun nil (lib "date2dn.pro" nil "JHU_APL_IDLUSR") "Result = %s(date0)" (nil ("help")))
   ("BOX_SIZE" pro nil (lib "box_size.pro" nil "JHU_APL_IDLUSR") "%s, X, Y, DX, DY, showflag" (nil ("color") ("dxmin") ("dymin") ("help") ("position") ("xfactor") ("xsize") ("yfactor") ("yreverse") ("ysize")))
   ("get_count" fun nil (lib "get_count.pro" nil "JHU_APL_IDLUSR") "Result = %s(tag)" (nil ("digits") ("file") ("help") ("last") ("set") ("zero") ("zref")))
   ("cgm" pro nil (lib "cgm.pro" nil "JHU_APL_IDLUSR") "%s, file0" (nil ("help")))
   ("dist_scale" pro nil (lib "dist_scale.pro" nil "JHU_APL_IDLUSR") "%s, x0, y0" (nil ("background") ("color") ("height") ("help") ("length") ("scale") ("size") ("thick") ("title")))
   ("checker" pro nil (lib "checker.pro" nil "JHU_APL_IDLUSR") "%s, nx, ny, msk" (nil ("help")))
   ("chinit" pro nil (lib "chinit.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("bposition") ("bthickness") ("factor") ("font") ("hard") ("help") ("landscape") ("last") ("move") ("units") ("winsize") ("xoffset") ("yoffset")))
   ("point" pro nil (lib "point.pro" nil "JHU_APL_IDLUSR") "%s, x, y, z" (nil ("angle") ("clip") ("color") ("data") ("device") ("help") ("nofill") ("nooutline") ("normal") ("ocolor") ("sides") ("size") ("t3d") ("thick")))
   ("cm2norm" pro nil (lib "cm2norm.pro" nil "JHU_APL_IDLUSR") "%s, a1, a2, a3, a4" (nil ("help")))
   ("color" pro nil (lib "color.pro" nil "JHU_APL_IDLUSR") "%s, name0, index, rct, gct, bct" (nil ("blue") ("exit") ("file") ("green") ("help") ("learn") ("list") ("maxnumber") ("name") ("number") ("red") ("text")))
   ("convert_ind" fun nil (lib "convert_ind.pro" nil "JHU_APL_IDLUSR") "Result = %s(txt0)" (nil ("help")))
   ("img_stretch" fun nil (lib "img_stretch.pro" nil "JHU_APL_IDLUSR") "Result = %s(img, lo, hi)" (nil ("error") ("help") ("noclip") ("outhi") ("outlo")))
   ("COSFILT" fun nil (lib "cosfilt.pro" nil "JHU_APL_IDLUSR") "Result = %s(DATA, F1, F2, F3, F4)" (nil ("help")))
   ("costap" fun nil (lib "costap.pro" nil "JHU_APL_IDLUSR") "Result = %s(w, r)" (nil ("help")))
   ("cspec" fun nil (lib "cspec.pro" nil "JHU_APL_IDLUSR") "Result = %s(z, n, sr, freq)" (nil ("help") ("n_ensemble") ("notes") ("overlap") ("zeropad")))
   ("ctint" pro nil (lib "ctint.pro" nil "JHU_APL_IDLUSR") "%s, r, g, b, i1, i2, mode" (nil ("help")))
   ("CTRIM" fun nil (lib "ctrim.pro" nil "JHU_APL_IDLUSR") "Result = %s(A)" (nil ("help")))
   ("CUMULATE" fun nil (lib "cumulate.pro" nil "JHU_APL_IDLUSR") "Result = %s(IN)" (nil ("help")))
   ("datatype" fun nil (lib "datatype.pro" nil "JHU_APL_IDLUSR") "Result = %s(var, flag0)" (nil ("descriptor") ("help") ("integer_bits") ("numeric")))
   ("date2ymd_1" pro nil (lib "date2ymd.pro" nil "JHU_APL_IDLUSR") "%s, date, y, m, d" (nil ("help")))
   ("date2ymd" pro nil (lib "date2ymd.pro" nil "JHU_APL_IDLUSR") "%s, date, y, m, d" (nil ("help")))
   ("DELCHR" fun nil (lib "delchr.pro" nil "JHU_APL_IDLUSR") "Result = %s(OLD, C)" (nil ("help")))
   ("diskcenter" pro nil (lib "diskcenter.pro" nil "JHU_APL_IDLUSR") "%s, img, x0, y0, r" (nil ("grid") ("help")))
   ("dms_form" fun nil (lib "dms_form.pro" nil "JHU_APL_IDLUSR") "Result = %s(deg0)" (nil ("degrees") ("font") ("help") ("nosec")))
   ("ydn2date" fun nil (lib "ydn2date.pro" nil "JHU_APL_IDLUSR") "Result = %s(yr, dn0)" (nil ("format") ("help")))
   ("DOT" fun nil (lib "dot.pro" nil "JHU_APL_IDLUSR") "Result = %s(S0, AZI, ALT)" (nil ("help")))
   ("draw" pro nil (lib "draw.pro" nil "JHU_APL_IDLUSR") "%s, x, y" (nil ("color") ("help")))
   ("embed" fun nil (lib "embed.pro" nil "JHU_APL_IDLUSR") "Result = %s(a, dw0)" (nil ("help") ("value")))
   ("drawpoly" pro nil (lib "drawpoly.pro" nil "JHU_APL_IDLUSR") "%s, x, y" (nil ("color") ("curve") ("data") ("device") ("fill") ("help") ("linestyle") ("noplot") ("normal") ("poly") ("thick")))
   ("dt_tm_brk" pro nil (lib "dt_tm_brk.pro" nil "JHU_APL_IDLUSR") "%s, txt, dt, tm" (nil ("help")))
   ("dt_tm_chk" fun nil (lib "dt_tm_chk.pro" nil "JHU_APL_IDLUSR") "Result = %s(txt)" (nil ("help")))
   ("dt_tm_dif" fun nil (lib "dt_tm_dif.pro" nil "JHU_APL_IDLUSR") "Result = %s(T1, T2)" (nil ("help")))
   ("dt_tm_fromjs" fun nil (lib "dt_tm_fromjs.pro" nil "JHU_APL_IDLUSR") "Result = %s(js)" (nil ("day") ("ddecimal") ("decimal") ("denominator") ("format") ("fraction") ("help") ("jd") ("month") ("numbers") ("second") ("year")))
   ("dt_tm_inc" pro nil (lib "dt_tm_inc.pro" nil "JHU_APL_IDLUSR") "%s, date_time, incsec" (nil ("format") ("help")))
   ("dt_tm_mak_sub" pro nil (lib "dt_tm_mak.pro" nil "JHU_APL_IDLUSR") "%s, fmt, txt, code, sub" (nil))
   ("dt_tm_mak" fun nil (lib "dt_tm_mak.pro" nil "JHU_APL_IDLUSR") "Result = %s(jd0, sec)" (nil ("ddecimal") ("decimal") ("denominator") ("format") ("help") ("numbers")))
   ("dt_tm_tojs" fun nil (lib "dt_tm_tojs.pro" nil "JHU_APL_IDLUSR") "Result = %s(dt)" (nil ("error") ("help") ("quiet")))
   ("ENTER" fun nil (lib "enter.pro" nil "JHU_APL_IDLUSR") "Result = %s(TYP, PROMPT, DEF, EXIT_FLAG, HELP_TEXT)" (nil ("help")))
   ("envelope" pro nil (lib "envelope.pro" nil "JHU_APL_IDLUSR") "%s, y, w, mn, mx, ind" (nil ("help")))
   ("F2FI16" fun nil (lib "f2fi16.pro" nil "JHU_APL_IDLUSR") "Result = %s(FEET)" (nil ("help") ("max_miles") ("min_inches")))
   ("EXPLORE" pro nil (lib "explore.pro" nil "JHU_APL_IDLUSR") "%s, A, X, Y" (nil ("help")))
   ("exrange" fun nil (lib "exrange.pro" nil "JHU_APL_IDLUSR") "Result = %s(x, f)" (nil ("help")))
   ("extremes" fun nil (lib "extremes.pro" nil "JHU_APL_IDLUSR") "Result = %s(y, flag)" (nil ("help")))
   ("factor" pro nil (lib "factor.pro" nil "JHU_APL_IDLUSR") "%s, x, p, n" (nil ("debug") ("help") ("quiet") ("try")))
   ("fft_filter" fun nil (lib "fft_filter.pro" nil "JHU_APL_IDLUSR") "Result = %s(data, filterwts)" (nil ("help")))
   ("FIT" pro nil (lib "fit.pro" nil "JHU_APL_IDLUSR") "%s, X0, Y0, CUR" (nil ("help")))
   ("FILEBREAK" pro nil (lib "filebreak.pro" nil "JHU_APL_IDLUSR") "%s, pathfile" (nil ("directory") ("extension") ("file") ("help") ("name") ("nvfile") ("os") ("version")))
   ("filename" fun nil (lib "filename.pro" nil "JHU_APL_IDLUSR") "Result = %s(symdir, name)" (nil ("delim") ("help") ("nosym") ("opsys")))
   ("fill_cont" fun nil (lib "fill_cont.pro" nil "JHU_APL_IDLUSR") "Result = %s(z)" (nil ("colors") ("help") ("levels") ("n_levels")))
   ("findfile2" fun nil (lib "findfile2.pro" nil "JHU_APL_IDLUSR") "Result = %s(pat)" (nil ("count") ("help") ("sort")))
   ("findfile3" fun nil (lib "findfile3.pro" nil "JHU_APL_IDLUSR") "Result = %s(pat)" (nil ("error") ("help") ("quiet")))
   ("firstchar" fun nil (lib "firstchar.pro" nil "JHU_APL_IDLUSR") "Result = %s(txt)" (nil ("help")))
   ("fit12" pro nil (lib "fit12.pro" nil "JHU_APL_IDLUSR") "%s, x, y, lo, hi, xoff, yoff, ftype, ptype, psym, cur, err0" (nil ("eqtxt") ("help")))
   ("fit6" pro nil (lib "fit6.pro" nil "JHU_APL_IDLUSR") "%s, x, y, lo, hi, xoff, yoff, ftype, cur, err0, go, fitflag, opt" (nil ("eqtxt") ("help")))
   ("fixgaps" fun nil (lib "fixgaps.pro" nil "JHU_APL_IDLUSR") "Result = %s(y, flag)" (nil ("help")))
   ("flat2sph" pro nil (lib "flat2sph.pro" nil "JHU_APL_IDLUSR") "%s, flat, lng1, lng2, lat1, lat2, out, lng0, lat0, rr, ny, nz" (nil ("help")))
   ("FNDWRD" pro nil (lib "fndwrd.pro" nil "JHU_APL_IDLUSR") "%s, TXTSTR, NWDS, LOC, LEN" (nil ("help")))
   ("gauss" fun nil (lib "gauss.pro" nil "JHU_APL_IDLUSR") "Result = %s(x, h)" (nil ("help") ("mean") ("sdev")))
   ("GEN_FIT" fun nil (lib "gen_fit.pro" nil "JHU_APL_IDLUSR") "Result = %s(XP, CUR)" (nil ("help")))
   ("genarrow" pro nil (lib "genarrow.pro" nil "JHU_APL_IDLUSR") "%s, x1, y1, x2, y2, x, y" (nil ("alen") ("awid") ("help") ("percent") ("shaft")))
   ("GENSHAPE" pro nil (lib "genshape.pro" nil "JHU_APL_IDLUSR") "%s, NAME, X, Y" (nil ("help")))
   ("getfile" fun nil (lib "getfile.pro" nil "JHU_APL_IDLUSR") "Result = %s(file)" (nil ("error") ("help") ("lines") ("quiet")))
   ("getfileln" fun nil (lib "getfileln.pro" nil "JHU_APL_IDLUSR") "Result = %s(file)" (nil ("error") ("found") ("help") ("key") ("line") ("start")))
   ("hlp" pro nil (lib "hlp.pro" nil "JHU_APL_IDLUSR") "%s, a1, a2, a3, a4, a5, a6, a7, a8, a9" (nil ("help")))
   ("makems" fun nil (lib "makems.pro" nil "JHU_APL_IDLUSR") "Result = %s(p0, p1, s)" (nil ("help")))
   ("getrun" fun nil (lib "getrun.pro" nil "JHU_APL_IDLUSR") "Result = %s(w, nth, mth)" (nil ("help") ("last") ("location") ("longest")))
   ("getsysnams" pro nil (lib "getsysnams.pro" nil "JHU_APL_IDLUSR") "%s, evar, n, lst1, lst2, lst3" (nil ("error") ("help")))
   ("getview" pro nil (lib "getview.pro" nil "JHU_APL_IDLUSR") "%s, vx1, vx2, vy1, vy2" (nil ("help")))
   ("getwindow" pro nil (lib "getwindow.pro" nil "JHU_APL_IDLUSR") "%s, xmn, xmx, ymn, ymx, err" (nil ("help") ("xmid") ("ymid")))
   ("GETWRD" fun nil (lib "getwrd.pro" nil "JHU_APL_IDLUSR") "Result = %s(TXTSTR, NTH, MTH)" (nil ("delimiter") ("help") ("last") ("location") ("notrim") ("nwords")))
   ("graphfile" pro nil (lib "graphfile.pro" nil "JHU_APL_IDLUSR") "%s, x0, y0, file" (nil ("array") ("color") ("help") ("lspace") ("size")))
   ("HELP_SAVE2" pro nil (lib "help_save2.pro" nil "JHU_APL_IDLUSR") "%s, FILE" (nil ("debug") ("help") ("xdr")))
   ("helpfile" pro nil (lib "helpfile.pro" nil "JHU_APL_IDLUSR") "%s, filenam" (nil ("directory") ("exit_code") ("help") ("txtmenu")))
   ("hist" fun nil (lib "hist.pro" nil "JHU_APL_IDLUSR") "Result = %s(arr, x, bin)" (nil ("bin_start") ("exact") ("help") ("maxbins") ("maxh") ("minh") ("nbins") ("weight")))
   ("hist2d" fun nil (lib "hist2d.pro" nil "JHU_APL_IDLUSR") "Result = %s(x, y)" (nil ("bin") ("help") ("list") ("max") ("min")))
   ("hline" pro nil (lib "hline.pro" nil "JHU_APL_IDLUSR") "%s, y0" (nil ("color") ("data") ("device") ("erase") ("help") ("linestyle") ("noerase") ("norm") ("number") ("range") ("reset") ("xmode")))
   ("hor" pro nil (lib "hor.pro" nil "JHU_APL_IDLUSR") "%s, y" (nil ("color") ("device") ("fill") ("help") ("left") ("linestyle") ("normalized") ("out") ("pointer") ("right") ("shrink") ("thickness")))
   ("hori" pro nil (lib "hori.pro" nil "JHU_APL_IDLUSR") "%s, y" (nil ("button") ("color") ("data") ("device") ("dialog") ("exitcode") ("help") ("instructions") ("js") ("keep") ("linestyle") ("menu") ("normal") ("nostatus") ("setstat") ("xformat") ("xmode") ("xsize") ("yformat") ("ysize")))
   ("leg" pro nil (lib "leg.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("box") ("color") ("device") ("font") ("help") ("indent") ("label") ("lcolor") ("linestyle") ("lsize") ("normalized") ("number") ("outpos") ("position") ("psym") ("scolor") ("symsize") ("tcolor") ("thick") ("title") ("tsize")))
   ("imagesize" pro nil (lib "imagesize.pro" nil "JHU_APL_IDLUSR") "%s, xmx, ymx, arr, xout, yout" (nil ("help")))
   ("IMGFRM" pro nil (lib "imgfrm.pro" nil "JHU_APL_IDLUSR") "%s, IMG, VALD" (nil ("help")))
   ("imgopen" pro nil (lib "imgopen.pro" nil "JHU_APL_IDLUSR") "%s, name, nx, ny" (nil ("error") ("help") ("list") ("offset") ("type")))
   ("imgpolrec" fun nil (lib "imgpolrec.pro" nil "JHU_APL_IDLUSR") "Result = %s(ar, a1, a2, r1, r2, x1, x2, dx, y1, y2, dy)" (nil ("a_edge") ("bilinear") ("help") ("mask") ("r_edge")))
   ("imgread" fun nil (lib "imgread.pro" nil "JHU_APL_IDLUSR") "Result = %s(x11, y11, x22, y22)" (nil ("debug") ("error") ("examples") ("help") ("nx") ("ny") ("rebin") ("show") ("ss") ("value") ("xss") ("yss")))
   ("IMGRECPOL" fun nil (lib "imgrecpol.pro" nil "JHU_APL_IDLUSR") "Result = %s(XY, X1, X2, Y1, Y2, A1, A2, DA, R1, R2, DR)" (nil ("bilinear") ("help") ("mask")))
   ("imgunder" pro nil (lib "imgunder.pro" nil "JHU_APL_IDLUSR") "%s, z" (nil ("center") ("help") ("interp") ("nodata") ("xfrac") ("yfrac")))
   ("inrange" pro nil (lib "inrange.pro" nil "JHU_APL_IDLUSR") "%s, stp, x1, x2, t1, t2, ta" (nil ("help")))
   ("interp1" fun nil (lib "interp1.pro" nil "JHU_APL_IDLUSR") "Result = %s(x, y, t)" (nil ("help")))
   ("pmatch" pro nil (lib "pmatch.pro" nil "JHU_APL_IDLUSR") "%s, s, p, in" (nil ("all") ("help")))
   ("intersect" fun nil (lib "intersect.pro" nil "JHU_APL_IDLUSR") "Result = %s(x, y)" (nil ("help")))
   ("isarray" fun nil (lib "isarray.pro" nil "JHU_APL_IDLUSR") "Result = %s(a)" (nil ("help")))
   ("jd2date" fun nil (lib "jd2date.pro" nil "JHU_APL_IDLUSR") "Result = %s(jd)" (nil ("form") ("help")))
   ("JD2STR" pro nil (lib "jd2str.pro" nil "JHU_APL_IDLUSR") "%s, JD, Y, M, D" (nil ("help")))
   ("jd2ymd" pro nil (lib "jd2ymd.pro" nil "JHU_APL_IDLUSR") "%s, jdd, y, m, d" (nil ("help")))
   ("js2ymds" pro nil (lib "js2ymds.pro" nil "JHU_APL_IDLUSR") "%s, js, y, m, d, s, t2, t3" (nil ("help")))
   ("jscheck" pro nil (lib "jscheck.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("help")))
   ("KURF" fun nil (lib "kurf.pro" nil "JHU_APL_IDLUSR") "Result = %s(X, W)" (nil ("help")))
   ("kurt" fun nil (lib "kurt.pro" nil "JHU_APL_IDLUSR") "Result = %s(a)" (nil ("help")))
   ("lastindex" pro nil (lib "lastindex.pro" nil "JHU_APL_IDLUSR") "%s, a, l1, l2, l3, l4, l5, l6, l7, l8" (nil ("help")))
   ("latexoff" pro nil (lib "latexoff.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("help")))
   ("latexon" pro nil (lib "latexon.pro" nil "JHU_APL_IDLUSR") "%s, file0" (nil ("help")))
   ("lecture" pro nil (lib "lecture.pro" nil "JHU_APL_IDLUSR") "%s, notes, slides, lect" (nil ("help") ("nocomments") ("nonumbers") ("oneline")))
   ("linepts" pro nil (lib "linepts.pro" nil "JHU_APL_IDLUSR") "%s, ix1, iy1, ix2, iy2, jx, jy" (nil ("help")))
   ("LINFILL" pro nil (lib "linfill.pro" nil "JHU_APL_IDLUSR") "%s, A, I1, I2" (nil ("help")))
   ("listruns" pro nil (lib "listruns.pro" nil "JHU_APL_IDLUSR") "%s, a, txt" (nil ("help") ("list") ("width")))
   ("ll2rb" pro nil (lib "ll2rb.pro" nil "JHU_APL_IDLUSR") "%s, lng1, lat1, lng2, lat2, dist, azi" (nil ("degrees") ("help")))
   ("LMST" fun nil (lib "lmst.pro" nil "JHU_APL_IDLUSR") "Result = %s(JD, UT, LNG)" (nil ("help")))
   ("locmax" pro nil (lib "locmax.pro" nil "JHU_APL_IDLUSR") "%s, img" (nil ("help") ("ix") ("iy") ("mask") ("noedge") ("sort") ("value_image") ("values") ("where")))
   ("ls" fun nil (lib "ls.pro" nil "JHU_APL_IDLUSR") "Result = %s(a, l, u, alo, ahi)" (nil ("help") ("nbins") ("noscale") ("quiet") ("scale_on") ("top")))
   ("MAKE_RULER" pro nil (lib "make_ruler.pro" nil "JHU_APL_IDLUSR") "%s, F" (nil ("help") ("list") ("noplot") ("printer")))
   ("make_scale" pro nil (lib "make_scale.pro" nil "JHU_APL_IDLUSR") "%s, f" (nil ("factor") ("help") ("list") ("printer") ("xoffset") ("yoffset")))
   ("MAKEI" fun nil (lib "makei.pro" nil "JHU_APL_IDLUSR") "Result = %s(LO0, HI0, ST)" (nil ("help")))
   ("makelabels" fun nil (lib "makelabels.pro" nil "JHU_APL_IDLUSR") "Result = %s(v, nd)" (nil ("help")))
   ("maken" fun nil (lib "maken.pro" nil "JHU_APL_IDLUSR") "Result = %s(xlo, xhi, n)" (nil ("help")))
   ("makenlog" fun nil (lib "makenlog.pro" nil "JHU_APL_IDLUSR") "Result = %s(xlo, xhi, n)" (nil ("help")))
   ("makevlt" pro nil (lib "makevlt.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("blue") ("bright") ("getseed") ("green") ("help") ("noload") ("ramp") ("random") ("red") ("sawtooth") ("sdev") ("seed") ("smooth") ("white")))
   ("makex" fun nil (lib "makex.pro" nil "JHU_APL_IDLUSR") "Result = %s(xlo, xhi, xst)" (nil ("help")))
   ("MAKEXY" pro nil (lib "makexy.pro" nil "JHU_APL_IDLUSR") "%s, X1, X2, DX, Y1, Y2, DY, XA, YA" (nil ("help")))
   ("makey" fun nil (lib "makey.pro" nil "JHU_APL_IDLUSR") "Result = %s(n, w)" (nil ("help") ("lastseed") ("periodic") ("seed")))
   ("makez" fun nil (lib "makez.pro" nil "JHU_APL_IDLUSR") "Result = %s(nx, ny, w)" (nil ("help") ("lastseed") ("periodic") ("seed")))
   ("mandelbrot" pro nil (lib "mandelbrot.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("help")))
   ("mcompute" pro nil (lib "mcompute.pro" nil "JHU_APL_IDLUSR") "%s, region, out" (nil ("help") ("last") ("show")))
   ("eqv_plot" pro nil (lib "eqvc.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("hard")))
   ("eqv_stat" pro nil (lib "eqvc.pro" nil "JHU_APL_IDLUSR") "%s, d" (nil ("text")))
   ("sp2v" fun nil (lib "eqvc.pro" nil "JHU_APL_IDLUSR") "Result = %s(p, smax, pmin, pmax)" (nil))
   ("sv2p" fun nil (lib "eqvc.pro" nil "JHU_APL_IDLUSR") "Result = %s(v, smax, pmin, pmax)" (nil))
   ("eqv_compile" pro nil (lib "eqvc.pro" nil "JHU_APL_IDLUSR") "%s, file" (nil ("c_axes") ("c_bak") ("c_ovr") ("c_plt") ("c_sct") ("discuss") ("equation") ("error") ("indv") ("init") ("number") ("out") ("overlay") ("par") ("psym") ("ptype") ("title") ("trange") ("up") ("xrange") ("xs") ("xtitle") ("xtype") ("yrange") ("ys") ("ytitle") ("ytype")))
   ("eqvlist_event" pro nil (lib "eqvc.pro" nil "JHU_APL_IDLUSR") "%s, ev" (nil))
   ("eqvlist" pro nil (lib "eqvc.pro" nil "JHU_APL_IDLUSR") "%s, list0" (nil))
   ("eqv_event" pro nil (lib "eqvc.pro" nil "JHU_APL_IDLUSR") "%s, ev" (nil))
   ("eqvc" pro nil (lib "eqvc.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("file") ("help") ("list") ("psym") ("root") ("snapshot") ("title") ("window") ("xs") ("xtitle") ("ys") ("ytitle")))
   ("midv" fun nil (lib "midv.pro" nil "JHU_APL_IDLUSR") "Result = %s(x)" (nil ("help")))
   ("MONTHDAYS" fun nil (lib "monthdays.pro" nil "JHU_APL_IDLUSR") "Result = %s(YR, M)" (nil ("help")))
   ("monthnames" fun nil (lib "monthnames.pro" nil "JHU_APL_IDLUSR") "Result = %s(num)" (nil ("full") ("help") ("lower") ("upper")))
   ("more" pro nil (lib "more.pro" nil "JHU_APL_IDLUSR") "%s, txt" (nil ("format") ("help") ("lines") ("numbers")))
   ("morefile" pro nil (lib "morefile.pro" nil "JHU_APL_IDLUSR") "%s, file" (nil ("error") ("help")))
   ("MOVBOX" pro nil (lib "movbox.pro" nil "JHU_APL_IDLUSR") "%s, X, Y, DX, DY, CODE" (nil ("color") ("commands") ("dxmin") ("dymin") ("exiterase") ("exitlist") ("help") ("locksize") ("noerase") ("nomenu") ("options") ("position") ("title") ("x_option") ("xfactor") ("xrange") ("xsize") ("y_option") ("yfactor") ("yrange") ("yreverse") ("ysize")))
   ("movcross" pro nil (lib "movcross.pro" nil "JHU_APL_IDLUSR") "%s, xdt, ydt" (nil ("color") ("help") ("linestyle")))
   ("move" pro nil (lib "move.pro" nil "JHU_APL_IDLUSR") "%s, x, y" (nil ("help")))
   ("multicol" fun nil (lib "multicol.pro" nil "JHU_APL_IDLUSR") "Result = %s(in)" (nil ("columns") ("header") ("help") ("lines") ("page") ("spaces") ("top")))
   ("mzoom" pro nil (lib "mzoom.pro" nil "JHU_APL_IDLUSR") "%s, rin0, img, rout" (nil ("help")))
   ("namenum" pro nil (lib "namenum.pro" nil "JHU_APL_IDLUSR") "%s, name, pat, i, j, k" (nil ("digits") ("help")))
   ("naxes" pro nil (lib "naxes.pro" nil "JHU_APL_IDLUSR") "%s, dx0, dx1, nx, drx0, drx1, nr, drinc, ndec" (nil ("help") ("no25")))
   ("nearest" fun nil (lib "nearest.pro" nil "JHU_APL_IDLUSR") "Result = %s(s, t, vlo, vhi)" (nil ("help")))
   ("points" fun nil (lib "points.pro" nil "JHU_APL_IDLUSR") "Result = %s(x)" (nil ("help") ("normalized") ("pixels")))
   ("nextitem" fun nil (lib "nextitem.pro" nil "JHU_APL_IDLUSR") "Result = %s(lun, txt)" (nil ("help")))
   ("nextnum" fun nil (lib "nextnum.pro" nil "JHU_APL_IDLUSR") "Result = %s(n)" (nil ("exit") ("help") ("limits") ("menu") ("steps")))
   ("nextplot" pro nil (lib "nextplot.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("help")))
   ("nicenumber" fun nil (lib "nicenumber.pro" nil "JHU_APL_IDLUSR") "Result = %s(x0)" (nil ("ceil") ("floor") ("help") ("minor") ("no25")))
   ("nruns" fun nil (lib "nruns.pro" nil "JHU_APL_IDLUSR") "Result = %s(w)" (nil ("help") ("length") ("start")))
   ("nthweekday" fun nil (lib "nthweekday.pro" nil "JHU_APL_IDLUSR") "Result = %s(yr, mn, wd, n)" (nil ("help") ("last")))
   ("num_dec" fun nil (lib "num_dec.pro" nil "JHU_APL_IDLUSR") "Result = %s(val)" (nil ("help")))
   ("numfactors" fun nil (lib "numfactors.pro" nil "JHU_APL_IDLUSR") "Result = %s(x)" (nil ("help") ("progress") ("quiet")))
   ("numname" fun nil (lib "numname.pro" nil "JHU_APL_IDLUSR") "Result = %s(pat, i, j, k)" (nil ("digits") ("help")))
   ("nwrds" fun nil (lib "nwrds.pro" nil "JHU_APL_IDLUSR") "Result = %s(txtstr)" (nil ("delimiter") ("help")))
   ("one2two" pro nil (lib "one2two.pro" nil "JHU_APL_IDLUSR") "%s, in, arr, inx, iny" (nil ("help")))
   ("opfit1d" fun nil (lib "opfit1d.pro" nil "JHU_APL_IDLUSR") "Result = %s(y, ndeg, x, c, p)" (nil ("help")))
   ("opfit2d" fun nil (lib "opfit2d.pro" nil "JHU_APL_IDLUSR") "Result = %s(z, xdeg, ydeg, x, y, c, px, py)" (nil ("help")))
   ("ORTHOPOLY" fun nil (lib "orthopoly.pro" nil "JHU_APL_IDLUSR") "Result = %s(X, NDEG, W)" (nil ("help")))
   ("parcurve" pro nil (lib "parcurve.pro" nil "JHU_APL_IDLUSR") "%s, x, y, x2, y2" (nil ("help") ("poly") ("shift")))
   ("path" pro nil (lib "path.pro" nil "JHU_APL_IDLUSR") "%s, in0" (nil ("front") ("help") ("init") ("last") ("list") ("patharray") ("remove") ("reset")))
   ("pckey" pro nil (lib "pckey.pro" nil "JHU_APL_IDLUSR") "%s, out" (nil ("ascii") ("flag") ("help")))
   ("PHASE" fun nil (lib "phase.pro" nil "JHU_APL_IDLUSR") "Result = %s(SZ0, PH0, TR, ED, Y)" (nil ("help")))
   ("pk" pro nil (lib "pk.pro" nil "JHU_APL_IDLUSR") "%s, px, py, ind" (nil ("code") ("help") ("nomark") ("xrange") ("yrange")))
   ("plane_int" pro nil (lib "plane_int.pro" nil "JHU_APL_IDLUSR") "%s, a1, a2, a3, b1, b2, b3, p, u, flag" (nil ("help")))
   ("plint" pro nil (lib "plint.pro" nil "JHU_APL_IDLUSR") "%s, lp1, lp2, n, pp, pi, flag" (nil ("help")))
   ("plotseq" pro nil (lib "plotseq.pro" nil "JHU_APL_IDLUSR") "%s, x, y, ind" (nil ("color") ("gcolor") ("gh") ("glinestyle") ("gv") ("help") ("symsize") ("title") ("xover") ("xrange") ("xscale") ("xtitle") ("xtype") ("yover") ("yrange") ("yticknames") ("ytickvalues") ("ytitle") ("ytype")))
   ("ph" fun nil (lib "ph.pro" nil "JHU_APL_IDLUSR") "Result = %s(z)" (nil ("degrees") ("help")))
   ("plotwin" pro nil (lib "plotwin.pro" nil "JHU_APL_IDLUSR") "%s, px0, py0, dpx, dpy" (nil ("charsize") ("help")))
   ("polrec" pro nil (lib "polrec.pro" nil "JHU_APL_IDLUSR") "%s, r, a, x, y" (nil ("degrees") ("help")))
   ("polrec3d" pro nil (lib "polrec3d.pro" nil "JHU_APL_IDLUSR") "%s, r, az, ax, x, y, z" (nil ("degrees") ("help")))
   ("poly_fit2" fun nil (lib "poly_fit2.pro" nil "JHU_APL_IDLUSR") "Result = %s(x, y, ndeg)" (nil ("help") ("xfit")))
   ("polystat" pro nil (lib "polystat.pro" nil "JHU_APL_IDLUSR") "%s, x, y, stats" (nil ("curve") ("help")))
   ("pos_cm" fun nil (lib "pos_cm.pro" nil "JHU_APL_IDLUSR") "Result = %s(posin)" (nil ("help")))
   ("sunjs2" pro nil (lib "sunjs2.pro" nil "JHU_APL_IDLUSR") "%s, js" (nil ("app_dec") ("app_lat") ("app_long") ("app_ra") ("carrington") ("dist") ("help") ("j2000_lat") ("j2000_long") ("lat0") ("list") ("long0") ("pa") ("sd") ("true_dec") ("true_lat") ("true_long") ("true_ra")))
   ("prime" fun nil (lib "prime.pro" nil "JHU_APL_IDLUSR") "Result = %s(n)" (nil ("help")))
   ("print_fact" pro nil (lib "print_fact.pro" nil "JHU_APL_IDLUSR") "%s, p, n" (nil ("help")))
   ("PRINTAT" pro nil (lib "printat.pro" nil "JHU_APL_IDLUSR") "%s, CL, LN, I1, I2, I3, I4, I5, I6, I7, I8, I9" (nil ("blinking") ("bold") ("clear") ("help") ("negative") ("underlined")))
   ("protractor" pro nil (lib "protractor.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("angle") ("color") ("factor") ("help") ("initialize") ("length") ("quiet")))
   ("psimg" pro nil (lib "psimg.pro" nil "JHU_APL_IDLUSR") "%s, img" (nil ("factor") ("help")))
   ("psinit" pro nil (lib "psinit.pro" nil "JHU_APL_IDLUSR") "%s, pnum" (nil ("autocolor") ("centimeters") ("cflag") ("charsize") ("color") ("comment") ("default") ("double") ("file") ("full") ("help") ("landscape") ("list_printers") ("margin") ("origin") ("quiet") ("vector") ("window")))
   ("pspaper" pro nil (lib "pspaper.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("help")))
   ("psterm" pro nil (lib "psterm.pro" nil "JHU_APL_IDLUSR") "%s, q" (nil ("clear_comment") ("help") ("last") ("noplot") ("nostamp") ("quiet")))
   ("putfile" pro nil (lib "putfile.pro" nil "JHU_APL_IDLUSR") "%s, file, s" (nil ("error") ("help")))
   ("radial_img" fun nil (lib "radial_img.pro" nil "JHU_APL_IDLUSR") "Result = %s(y, n)" (nil ("help")))
   ("radii" pro nil (lib "radii.pro" nil "JHU_APL_IDLUSR") "%s, r1, r2, a, xx, yy" (nil ("clip") ("color") ("data") ("device") ("help") ("linestyle") ("norm") ("thickness")))
   ("win_info" fun nil (lib "win_info.pro" nil "JHU_APL_IDLUSR") "Result = %s(win0)" (nil ("help")))
   ("raout" pro nil (lib "raout.pro" nil "JHU_APL_IDLUSR") "%s, r, a0, text, flag" (nil ("color") ("help") ("size")))
   ("rb2ll" pro nil (lib "rb2ll.pro" nil "JHU_APL_IDLUSR") "%s, lng1, lat1, dist, azi, lng2, lat2" (nil ("degrees") ("help")))
   ("rdcol" fun nil (lib "rdcol.pro" nil "JHU_APL_IDLUSR") "Result = %s(file, rec1, rec2, cols)" (nil ("err") ("help") ("sign") ("uneven")))
   ("rdfile" pro nil (lib "rdfile.pro" nil "JHU_APL_IDLUSR") "%s, file, rec1, rec2, s" (nil ("err") ("help")))
   ("readtokey" pro nil (lib "readtokey.pro" nil "JHU_APL_IDLUSR") "%s, lun" (nil ("error") ("help") ("key") ("maxline") ("out") ("start")))
   ("round2" fun nil (lib "round2.pro" nil "JHU_APL_IDLUSR") "Result = %s(x)" (nil ("help")))
   ("recpol" pro nil (lib "recpol.pro" nil "JHU_APL_IDLUSR") "%s, x, y, r, a" (nil ("degrees") ("help")))
   ("recpol3d" pro nil (lib "recpol3d.pro" nil "JHU_APL_IDLUSR") "%s, x, y, z, r, az, ax" (nil ("degrees") ("help")))
   ("REGIONS" fun nil (lib "regions.pro" nil "JHU_APL_IDLUSR") "Result = %s(A, V0)" (nil ("help") ("list")))
   ("regionsbar" pro nil (lib "regionsbar.pro" nil "JHU_APL_IDLUSR") "%s, v" (nil ("help")))
   ("REPCHR" fun nil (lib "repchr.pro" nil "JHU_APL_IDLUSR") "Result = %s(OLD, C1, C2)" (nil ("help")))
   ("REPWORD" fun nil (lib "repword.pro" nil "JHU_APL_IDLUSR") "Result = %s(TXT1, N, NEW_WORD, OLD_WORD)" (nil ("compress") ("help") ("trim")))
   ("resclose" pro nil (lib "resclose.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("extended") ("fd") ("force") ("help") ("quiet")))
   ("rescom" pro nil (lib "rescom.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("fd") ("file") ("getlun") ("help") ("noheader") ("nostatus") ("tag")))
   ("resget" pro nil (lib "resget.pro" nil "JHU_APL_IDLUSR") "%s, name, val" (nil ("address") ("error") ("exact") ("fd") ("found") ("from") ("full_name") ("header") ("help") ("number")))
   ("resopen" pro nil (lib "resopen.pro" nil "JHU_APL_IDLUSR") "%s, file" (nil ("append") ("error") ("fd") ("fstat") ("header") ("help") ("noswap") ("quiet") ("swap") ("text_error") ("write") ("xdr")))
   ("resput" pro nil (lib "resput.pro" nil "JHU_APL_IDLUSR") "%s, name, val" (nil ("comments") ("error") ("fd") ("help") ("scalar")))
   ("RESTORE2" pro nil (lib "restore2.pro" nil "JHU_APL_IDLUSR") "%s, FILE, T1, T2, T3, T4, T5, T6, T7, T8, T9" (nil ("error") ("help") ("more") ("xdr")))
   ("rev" pro nil (lib "rev.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("help") ("prompt")))
   ("rot_3d" pro nil (lib "rot_3d.pro" nil "JHU_APL_IDLUSR") "%s, axis, x1, y1, z1, ang, x2, y2, z2" (nil ("degrees") ("help")))
   ("ROTATE_XY" pro nil (lib "rotate_xy.pro" nil "JHU_APL_IDLUSR") "%s, X1, Y1, ANG, X0, Y0, X2, Y2" (nil ("degrees") ("help")))
   ("rotvlt" pro nil (lib "rotvlt.pro" nil "JHU_APL_IDLUSR") "%s, q" (nil ("chord") ("help") ("range") ("reverse") ("sound") ("step") ("wait")))
   ("jdselect" fun nil (lib "jdselect.pro" nil "JHU_APL_IDLUSR") "Result = %s(jdin, match)" (nil ("days") ("help") ("months")))
   ("RTICS" pro nil (lib "rtics.pro" nil "JHU_APL_IDLUSR") "%s, A1, A2, DA, R1, R2, RL, LB0, SZ, FLG" (nil ("help") ("x0") ("y0")))
   ("RUNLENGTH" fun nil (lib "runlength.pro" nil "JHU_APL_IDLUSR") "Result = %s(X, R)" (nil ("help")))
   ("SAVE2" pro nil (lib "save2.pro" nil "JHU_APL_IDLUSR") "%s, FILE, T1, T2, T3, T4, T5, T6, T7, T8, T9" (nil ("help") ("more") ("xdr")))
   ("scale_db" fun nil (lib "scale_db.pro" nil "JHU_APL_IDLUSR") "Result = %s(p, db, pmax, minout, maxout)" (nil ("help") ("maxdb") ("noclip")))
   ("SCALEARRAY" fun nil (lib "scalearray.pro" nil "JHU_APL_IDLUSR") "Result = %s(A, IN1, IN2, OUT1, OUT2)" (nil ("help")))
   ("screen" pro nil (lib "screen.pro" nil "JHU_APL_IDLUSR") "%s, num" (nil ("help")))
   ("sdev" fun nil (lib "sdev.pro" nil "JHU_APL_IDLUSR") "Result = %s(a)" (nil ("help")))
   ("sechms" pro nil (lib "sechms.pro" nil "JHU_APL_IDLUSR") "%s, sec, h, m, s, sh, sm, ss" (nil ("eps") ("frac") ("help")))
   ("secstr" fun nil (lib "secstr.pro" nil "JHU_APL_IDLUSR") "Result = %s(tstr0)" (nil ("help")))
   ("SEGMENT" fun nil (lib "segment.pro" nil "JHU_APL_IDLUSR") "Result = %s(A)" (nil ("help")))
   ("set_isoxy" pro nil (lib "set_isoxy.pro" nil "JHU_APL_IDLUSR") "%s, xmn0, xmx0, ymn0, ymx0" (nil ("charsize") ("help") ("latitude") ("list") ("nxrange") ("nyrange") ("xlock") ("ylock")))
   ("set_window" pro nil (lib "set_window.pro" nil "JHU_APL_IDLUSR") "%s, x0, x1, y0, y1" (nil ("help") ("nxrange") ("nyrange")))
   ("setminus" fun nil (lib "setminus.pro" nil "JHU_APL_IDLUSR") "Result = %s(a, b)" (nil ("help")))
   ("SHADE_CLT" pro nil (lib "shade_clt.pro" nil "JHU_APL_IDLUSR") "%s, CT" (nil ("help")))
   ("SHOW_BOX" pro nil (lib "show_box.pro" nil "JHU_APL_IDLUSR") "%s, X0, Y0, DX0, DY0, code" (nil ("help") ("position") ("title") ("xfactor") ("yfactor") ("yreverse")))
   ("SIGN" fun nil (lib "sign.pro" nil "JHU_APL_IDLUSR") "Result = %s(X)" (nil ("help")))
   ("simp" fun nil (lib "simp.pro" nil "JHU_APL_IDLUSR") "Result = %s(y, h)" (nil ("help")))
   ("skew" fun nil (lib "skew.pro" nil "JHU_APL_IDLUSR") "Result = %s(a)" (nil ("help")))
   ("SKEWF" fun nil (lib "skewf.pro" nil "JHU_APL_IDLUSR") "Result = %s(X, W)" (nil ("help")))
   ("skewint" pro nil (lib "skewint.pro" nil "JHU_APL_IDLUSR") "%s, a, b, c, d, mid, err, help" (nil))
   ("slowplot" pro nil (lib "slowplot.pro" nil "JHU_APL_IDLUSR") "%s, x, y, n" (nil ("charsize") ("fade") ("fast_fade") ("help") ("overplot") ("title") ("wait") ("xtitle") ("ytitle")))
   ("smooth2" fun nil (lib "smooth2.pro" nil "JHU_APL_IDLUSR") "Result = %s(i, w)" (nil ("help")))
   ("spc" fun nil (lib "spc.pro" nil "JHU_APL_IDLUSR") "Result = %s(n, text)" (nil ("character") ("help") ("notrim")))
   ("sph_demo" pro nil (lib "sph_demo.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("hard") ("help")))
   ("sphdist" fun nil (lib "sphdist.pro" nil "JHU_APL_IDLUSR") "Result = %s(long1, lat1, long2, lat2)" (nil ("degrees") ("help")))
   ("sphic" pro nil (lib "sphic.pro" nil "JHU_APL_IDLUSR") "%s, ln1, lt1, r1, ln2, lt2, r2, lnp1, ltp1, lnp2, ltp2, flag" (nil ("degrees") ("help")))
   ("sphinit" pro nil (lib "sphinit.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("color") ("device") ("fill") ("front") ("help") ("hid_style") ("inc") ("lat") ("linestyle") ("list") ("long") ("pa") ("radius") ("thick") ("top") ("vaz") ("vis_style") ("vpa") ("x") ("y")))
   ("sphlat" pro nil (lib "sphlat.pro" nil "JHU_APL_IDLUSR") "%s, lat, rad, lng1, lng2" (nil ("color") ("help") ("hidden") ("linestyle") ("maxrad") ("thick")))
   ("sphlng" pro nil (lib "sphlng.pro" nil "JHU_APL_IDLUSR") "%s, lng, rad, lat1, lat2" (nil ("color") ("help") ("hidden") ("linestyle") ("maxrad") ("thick")))
   ("sphplot" pro nil (lib "sphplot.pro" nil "JHU_APL_IDLUSR") "%s, lnga, lata, rada, code" (nil ("all") ("color") ("help") ("hidden") ("linestyle") ("maxrad") ("pen") ("psym") ("symsize") ("thick") ("xout") ("xyz") ("yout")))
   ("sphrad" pro nil (lib "sphrad.pro" nil "JHU_APL_IDLUSR") "%s, lng, lat, r10, r20" (nil ("color") ("help") ("hidden") ("linestyle") ("maxrad") ("thick")))
   ("sphtext" pro nil (lib "sphtext.pro" nil "JHU_APL_IDLUSR") "%s, text, r, lng1, lng2, lat1, lat2" (nil ("ang") ("back") ("color") ("help") ("linestyle")))
   ("SPLAT" pro nil (lib "splat.pro" nil "JHU_APL_IDLUSR") "%s, N, R1, R2, X, Y" (nil ("help") ("smooth")))
   ("sprint" pro nil (lib "sprint.pro" nil "JHU_APL_IDLUSR") "%s, p1, p2, p3" (nil ("color") ("erase") ("help") ("index") ("size")))
   ("created" fun nil (lib "created.pro" nil "JHU_APL_IDLUSR") "Result = %s" (nil ("by") ("help") ("verb")))
   ("STEXT_XYP" fun nil (lib "stext_xyp.pro" nil "JHU_APL_IDLUSR") "Result = %s(TXT)" (nil ("ANG") ("help") ("JUST") ("SIZE") ("xfact") ("xtxt") ("ytxt")))
   ("strep" fun nil (lib "strep.pro" nil "JHU_APL_IDLUSR") "Result = %s(s, cmd, ip, ss, iflg)" (nil ("help")))
   ("stress" fun nil (lib "stress.pro" nil "JHU_APL_IDLUSR") "Result = %s(strng, cmdx, n, old_in, new_in, ned)" (nil ("help")))
   ("STRIPSHIFT" fun nil (lib "stripshift.pro" nil "JHU_APL_IDLUSR") "Result = %s(IN, SS, SA, FLG)" (nil ("help")))
   ("strlentab" fun nil (lib "strlentab.pro" nil "JHU_APL_IDLUSR") "Result = %s(txt)" (nil ("help") ("tabsize")))
   ("strsec" fun nil (lib "strsec.pro" nil "JHU_APL_IDLUSR") "Result = %s(sec0, d)" (nil ("help") ("hours")))
   ("strsub" fun nil (lib "strsub.pro" nil "JHU_APL_IDLUSR") "Result = %s(strng, p1, p2)" (nil ("help") ("last")))
   ("strtrm2" fun nil (lib "strtrm2.pro" nil "JHU_APL_IDLUSR") "Result = %s(s, fx, cx)" (nil ("help")))
   ("subnormal" pro nil (lib "subnormal.pro" nil "JHU_APL_IDLUSR") "%s, a1, a2, a3, a4" (nil ("cm") ("help") ("lastwindow") ("window")))
   ("sun" pro nil (lib "sun.pro" nil "JHU_APL_IDLUSR") "%s, yr, m, d, et" (nil ("app_dec") ("app_lat") ("app_long") ("app_ra") ("carrington") ("dist") ("help") ("lat0") ("list") ("long0") ("pa") ("sd") ("true_dec") ("true_lat") ("true_long") ("true_ra")))
   ("SUN_SHADE" fun nil (lib "sun_shade.pro" nil "JHU_APL_IDLUSR") "Result = %s(D, ALT, AZI, EMIN, EMAX)" (nil ("help")))
   ("testcolor" pro nil (lib "testcolor.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("all") ("help") ("start")))
   ("t_init" pro nil (lib "tetris.pro" nil "JHU_APL_IDLUSR") "%s, wt, lev" (nil ("bell")))
   ("t_next" pro nil (lib "tetris.pro" nil "JHU_APL_IDLUSR") "%s, pn" (nil))
   ("t_drop" pro nil (lib "tetris.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("done") ("range")))
   ("t_left" pro nil (lib "tetris.pro" nil "JHU_APL_IDLUSR") "%s" (nil))
   ("t_right" pro nil (lib "tetris.pro" nil "JHU_APL_IDLUSR") "%s" (nil))
   ("t_rot" pro nil (lib "tetris.pro" nil "JHU_APL_IDLUSR") "%s" (nil))
   ("t_plot" pro nil (lib "tetris.pro" nil "JHU_APL_IDLUSR") "%s, flag" (nil))
   ("t_score" pro nil (lib "tetris.pro" nil "JHU_APL_IDLUSR") "%s, r" (nil))
   ("t_help" pro nil (lib "tetris.pro" nil "JHU_APL_IDLUSR") "%s" (nil))
   ("tetris" pro nil (lib "tetris.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("bell") ("help") ("level") ("top") ("wait")))
   ("TIME_LABEL" fun nil (lib "time_label.pro" nil "JHU_APL_IDLUSR") "Result = %s(V, form)" (nil ("help") ("jd")))
   ("timeaxis" pro nil (lib "timeaxis.pro" nil "JHU_APL_IDLUSR") "%s, t" (nil ("charsize") ("charthick") ("color") ("dy") ("form") ("help") ("jd") ("labeloffset") ("lshift") ("major") ("minor") ("nolabels") ("noyear") ("nticks") ("size") ("thick") ("ticklen") ("title") ("tmajor") ("tminor") ("trange") ("yvalue")))
   ("timer" pro nil (lib "timer.pro" nil "JHU_APL_IDLUSR") "%s, dt" (nil ("comment") ("help") ("number") ("print") ("reset") ("start") ("stop") ("sum")))
   ("tnaxes" pro nil (lib "tnaxes.pro" nil "JHU_APL_IDLUSR") "%s, dx0, dx1, nx, mjx1, mjx2, xi, mnx1, mnx2, xi2" (nil ("form") ("help")))
   ("todev" pro nil (lib "todev.pro" nil "JHU_APL_IDLUSR") "%s, x1, y1, x2, y2" (nil ("data") ("help") ("normalized")))
   ("topo" fun nil (lib "topo.pro" nil "JHU_APL_IDLUSR") "Result = %s(s0, az, ax)" (nil ("delta") ("help") ("zero")))
   ("translate" pro nil (lib "translate.pro" nil "JHU_APL_IDLUSR") "%s, img1, img2, dx2, dy2, c" (nil ("exitkey") ("exittext") ("first") ("help")))
   ("tvbox" pro nil (lib "tvbox.pro" nil "JHU_APL_IDLUSR") "%s, x, y, dx, dy, clr" (nil ("copy") ("help") ("nocopy") ("noerase") ("xmode")))
   ("tvcirc" pro nil (lib "tvcirc.pro" nil "JHU_APL_IDLUSR") "%s, x, y, r" (nil ("color") ("help")))
   ("tvpos" pro nil (lib "tvpos.pro" nil "JHU_APL_IDLUSR") "%s, img, pos, x0, y0" (nil ("help") ("resolution")))
   ("tvrd2" fun nil (lib "tvrd2.pro" nil "JHU_APL_IDLUSR") "Result = %s(x, y, dx, dy)" (nil ("help") ("image") ("true")))
   ("tvrdbox" pro nil (lib "tvrdbox.pro" nil "JHU_APL_IDLUSR") "%s, a" (nil ("code") ("color") ("exiterase") ("help") ("noerase") ("x") ("y")))
   ("tvwrbox" pro nil (lib "tvwrbox.pro" nil "JHU_APL_IDLUSR") "%s, a" (nil ("bilinear") ("help") ("noerase")))
   ("two2one" pro nil (lib "two2one.pro" nil "JHU_APL_IDLUSR") "%s, inx, iny, arr, in" (nil ("help")))
   ("txtdemo" pro nil (lib "txtdemo.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("help")))
   ("txtfile" pro nil (lib "txtfile.pro" nil "JHU_APL_IDLUSR") "%s, file" (nil ("check") ("directory") ("error_text") ("help") ("title")))
   ("txtgetfile" pro nil (lib "txtgetfile.pro" nil "JHU_APL_IDLUSR") "%s, name" (nil ("abort_text") ("def_extension") ("directory") ("help") ("multiple") ("nocheck") ("numdef") ("option1") ("option2") ("option3") ("option4") ("option5") ("quit_text") ("title_text") ("wildcard")))
   ("txtin" pro nil (lib "txtin.pro" nil "JHU_APL_IDLUSR") "%s, ptxt, val" (nil ("default") ("help") ("x") ("y")))
   ("txtmenu_txt" pro nil (lib "txtmenu.pro" nil "JHU_APL_IDLUSR") "%s, out" (nil ("capture")))
   ("txtmenu_display" pro nil (lib "txtmenu.pro" nil "JHU_APL_IDLUSR") "%s" (nil))
   ("txtmenu" pro nil (lib "txtmenu.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("delimiter") ("help") ("initialize") ("morehelp") ("multiple") ("selection") ("seperator") ("tag") ("update") ("uvalue") ("value") ("xy")))
   ("txtmenu_help" pro nil (lib "txtmenu_help.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("help")))
   ("txtmess" pro nil (lib "txtmess.pro" nil "JHU_APL_IDLUSR") "%s, txt" (nil ("help") ("key") ("noclear") ("prompt") ("wait") ("x") ("y")))
   ("txtmeter" pro nil (lib "txtmeter.pro" nil "JHU_APL_IDLUSR") "%s, fr" (nil ("alternate") ("clear") ("help") ("initialize") ("number") ("title") ("y")))
   ("txtpick" pro nil (lib "txtpick.pro" nil "JHU_APL_IDLUSR") "%s, list, outfile" (nil ("abort_text") ("actxt") ("help") ("multiple") ("selection") ("title_text")))
   ("txtyesno" fun nil (lib "txtyesno.pro" nil "JHU_APL_IDLUSR") "Result = %s(txt)" (nil ("help") ("noclear") ("x") ("y")))
   ("UNIT" fun nil (lib "unit.pro" nil "JHU_APL_IDLUSR") "Result = %s(V)" (nil ("help")))
   ("VARF" fun nil (lib "varf.pro" nil "JHU_APL_IDLUSR") "Result = %s(X, W)" (nil ("help")))
   ("VARIANCE" fun nil (lib "variance.pro" nil "JHU_APL_IDLUSR") "Result = %s(A, MU)" (nil ("help")))
   ("vase" pro nil (lib "vase.pro" nil "JHU_APL_IDLUSR") "%s, q" (nil ("bw") ("color") ("help") ("stereo")))
   ("vecfld" pro nil (lib "vecfld.pro" nil "JHU_APL_IDLUSR") "%s, u0, v0, l" (nil ("_extra") ("help") ("iso") ("magnitudes") ("mark") ("psym") ("symcolor") ("symsize") ("vscale") ("x0") ("y0")))
   ("vect_angle" fun nil (lib "vect_angle.pro" nil "JHU_APL_IDLUSR") "Result = %s(x1, y1, z1, x2, y2, z2)" (nil ("degrees") ("help")))
   ("ver" pro nil (lib "ver.pro" nil "JHU_APL_IDLUSR") "%s, x" (nil ("bottom") ("color") ("device") ("fill") ("help") ("linestyle") ("normalized") ("out") ("pointer") ("shrink") ("thickness") ("top")))
   ("veri" pro nil (lib "veri.pro" nil "JHU_APL_IDLUSR") "%s, x" (nil ("button") ("color") ("data") ("device") ("dialog") ("exitcode") ("help") ("instructions") ("js") ("keep") ("linestyle") ("menu") ("normal") ("nostatus") ("setstat") ("xformat") ("xmode") ("xsize") ("yformat") ("ysize")))
   ("vimgseq" pro nil (lib "vimgseq.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("help") ("xsize") ("ysize")))
   ("vline" pro nil (lib "vline.pro" nil "JHU_APL_IDLUSR") "%s, x0" (nil ("color") ("data") ("device") ("erase") ("help") ("linestyle") ("noerase") ("norm") ("number") ("range") ("reset") ("xmode")))
   ("WEEKDAY" fun nil (lib "weekday.pro" nil "JHU_APL_IDLUSR") "Result = %s(Y, M, D, NWD)" (nil ("help")))
   ("wmenu2" fun nil (lib "wmenu2.pro" nil "JHU_APL_IDLUSR") "Result = %s(list)" (nil ("help") ("initial_selection") ("nomouse") ("nowidgets") ("title")))
   ("wordarray" pro nil (lib "wordarray.pro" nil "JHU_APL_IDLUSR") "%s, in, out" (nil ("delimiters") ("help") ("ignore") ("number") ("white")))
   ("WORDORDER" fun nil (lib "wordorder.pro" nil "JHU_APL_IDLUSR") "Result = %s(OLD, ORDER)" (nil ("help")))
   ("wordpos" fun nil (lib "wordpos.pro" nil "JHU_APL_IDLUSR") "Result = %s(ref0, wd0, s1)" (nil ("char") ("help") ("ignore_case") ("max") ("offset")))
   ("obj_draw_opt" pro nil (lib "obj_draw.pro" nil "JHU_APL_IDLUSR") "%s, ev" (nil))
   ("obj_draw_event" pro nil (lib "obj_draw.pro" nil "JHU_APL_IDLUSR") "%s, ev" (nil))
   ("obj_draw" pro nil (lib "obj_draw.pro" nil "JHU_APL_IDLUSR") "%s, obj" (nil ("annotate") ("group_leader") ("help") ("notitle") ("title") ("user_options") ("wid") ("win") ("xsize") ("ysize")))
   ("xprint" pro nil (lib "xprint.pro" nil "JHU_APL_IDLUSR") "%s, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10" (nil ("alignment") ("charsize") ("charthick") ("color") ("data") ("debug") ("device") ("dy") ("help") ("init") ("norm") ("nwin") ("size") ("x0") ("y0") ("yspace")))
   ("XTICS" pro nil (lib "xtics.pro" nil "JHU_APL_IDLUSR") "%s, X1, X2, DX, Y1, Y2, YL, LB0, SZ" (nil ("help")))
   ("xyoutb" pro nil (lib "xyoutb.pro" nil "JHU_APL_IDLUSR") "%s, x, y, text" (nil ("alignment") ("bold") ("charsize") ("color") ("data") ("device") ("font") ("help") ("normal") ("orientation") ("pixels") ("shift") ("size")))
   ("YDN2MD" pro nil (lib "ydn2md.pro" nil "JHU_APL_IDLUSR") "%s, YR, DY, M, D" (nil ("help")))
   ("ymd2date" fun nil (lib "ymd2date.pro" nil "JHU_APL_IDLUSR") "Result = %s(y, m, d)" (nil ("format") ("help")))
   ("ymd2dn" fun nil (lib "ymd2dn.pro" nil "JHU_APL_IDLUSR") "Result = %s(yr, m, d)" (nil ("help")))
   ("ymd2jd" fun nil (lib "ymd2jd.pro" nil "JHU_APL_IDLUSR") "Result = %s(iy, im, id)" (nil ("help")))
   ("ymds2js" fun nil (lib "ymds2js.pro" nil "JHU_APL_IDLUSR") "Result = %s(y, m, d, s)" (nil ("help")))
   ("ZPLOT" pro nil (lib "zplot.pro" nil "JHU_APL_IDLUSR") "%s, X, Y, Z" (nil ("data") ("device") ("help") ("normal") ("psym")))
   ("basecon" fun nil (lib "basecon.pro" nil "JHU_APL_IDLUSR") "Result = %s(in0)" (nil ("digits") ("error") ("from") ("group") ("help") ("to")))
   ("swmenu_event" pro nil (lib "swlist.pro" nil "JHU_APL_IDLUSR") "%s, ev" (nil))
   ("swlist" pro nil (lib "swlist.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("help")))
   ("nwin" pro nil (lib "nwin.pro" nil "JHU_APL_IDLUSR") "%s, x, y, x2, y2" (nil ("help") ("to_data") ("to_device") ("to_normalized")))
   ("pan" pro nil (lib "pan.pro" nil "JHU_APL_IDLUSR") "%s, out" (nil ("color") ("help") ("inwindow") ("outwindow")))
   ("txtgetkey" fun nil (lib "txtgetkey.pro" nil "JHU_APL_IDLUSR") "Result = %s(key)" (nil ("delimiter") ("help") ("index") ("initialize") ("list") ("nosort") ("start") ("structure")))
   ("imgline" pro nil (lib "imgline.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("color") ("factor") ("help") ("initialize") ("length") ("p1") ("p2") ("quiet")))
   ("pcon" pro nil (lib "pcon.pro" nil "JHU_APL_IDLUSR") "%s, cmd" (nil ("help") ("list")))
   ("etc" fun nil (lib "etc.pro" nil "JHU_APL_IDLUSR") "Result = %s(fraction)" (nil ("delta") ("help") ("status")))
   ("js2v" pro nil (lib "js2v.pro" nil "JHU_APL_IDLUSR") "%s, file, time, data" (nil ("help")))
   ("jd2mdays" pro nil (lib "jd2mdays.pro" nil "JHU_APL_IDLUSR") "%s, jd1, jd2, mjds, mjde" (nil ("approx_maj") ("format") ("help") ("major_v") ("minor_v")))
   ("interpx" fun nil (lib "interpx.pro" nil "JHU_APL_IDLUSR") "Result = %s(x, y, xx)" (nil ("bad") ("fixbad") ("gap") ("help")))
   ("dbreak" pro nil (lib "dbreak.pro" nil "JHU_APL_IDLUSR") "%s, x, y" (nil ("gap") ("help") ("low") ("tag_value")))
   ("fixang" fun nil (lib "fixang.pro" nil "JHU_APL_IDLUSR") "Result = %s(a)" (nil ("help") ("radians")))
   ("xspec" fun nil (lib "xspec.pro" nil "JHU_APL_IDLUSR") "Result = %s(x, y, n0, sr0, freq)" (nil ("ca_array") ("help") ("n_ensemble") ("notes") ("overlap") ("transfer_funct")))
   ("drop_comments" fun nil (lib "drop_comments.pro" nil "JHU_APL_IDLUSR") "Result = %s(txt0)" (nil ("error") ("help") ("ignore") ("index") ("notrim") ("quiet") ("trailing")))
   ("time2jdoff" pro nil (lib "time2jdoff.pro" nil "JHU_APL_IDLUSR") "%s, t" (nil ("help") ("jd") ("off") ("reference")))
   ("rspec" fun nil (lib "rspec.pro" nil "JHU_APL_IDLUSR") "Result = %s(x, n0, sr0, freq)" (nil ("accumulate") ("help") ("n_ensemble") ("notes") ("overlap") ("zeropad")))
   ("pack_best" pro nil (lib "pack.pro" nil "JHU_APL_IDLUSR") "%s, w, h, nx, ny, mn, fx, fy, aa, bb, ww, hh, rat" (nil))
   ("pack" pro nil (lib "pack.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("code") ("help") ("top")))
   ("tiffscreen" pro nil (lib "tiffscreen.pro" nil "JHU_APL_IDLUSR") "%s, file" (nil ("help")))
   ("makev" fun nil (lib "makev.pro" nil "JHU_APL_IDLUSR") "Result = %s(nx, ny, nz, w, m, sd, seed0)" (nil ("help")))
   ("swindow" pro nil (lib "swindow.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("colors") ("get_scroll") ("group_leader") ("help") ("index") ("pixmap") ("quiet") ("retain") ("title") ("view") ("x_scroll_size") ("xoffset") ("xsize") ("y_scroll_size") ("yoffset") ("ysize")))
   ("swdelete" pro nil (lib "swdelete.pro" nil "JHU_APL_IDLUSR") "%s, ind0" (nil ("help")))
   ("interpx_demo" pro nil (lib "interpx_demo.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("help")))
   ("xhelp_event" pro nil (lib "xhelp.pro" nil "JHU_APL_IDLUSR") "%s, ev" (nil))
   ("xhelp" pro nil (lib "xhelp.pro" nil "JHU_APL_IDLUSR") "%s, txt" (nil ("exit_text") ("group_leader") ("help") ("lines") ("nowait") ("save") ("scroll") ("tid") ("title") ("ttid") ("wait") ("wid") ("xoffset") ("xsize") ("yoffset")))
   ("unique" fun nil (lib "unique.pro" nil "JHU_APL_IDLUSR") "Result = %s(in0, count)" (nil ("help") ("sort")))
   ("splot" pro nil (lib "splot.pro" nil "JHU_APL_IDLUSR") "%s, x, y" (nil ("_EXTRA") ("color") ("help") ("position") ("shade") ("sthick")))
   ("soplot" pro nil (lib "soplot.pro" nil "JHU_APL_IDLUSR") "%s, x, y" (nil ("_EXTRA") ("color") ("help") ("shade") ("sthick")))
   ("zpan" pro nil (lib "zpan.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("help") ("inwindow") ("outwindow") ("size") ("zoom")))
   ("plotpos" fun nil (lib "plotpos.pro" nil "JHU_APL_IDLUSR") "Result = %s(j, nx, ny)" (nil ("charsize") ("device") ("help") ("hwratio") ("norigin") ("normal") ("origin") ("xmargin") ("ymargin")))
   ("izoom" pro nil (lib "izoom.pro" nil "JHU_APL_IDLUSR") "%s, x0, y0, z0" (nil ("_extra") ("anti") ("axes_only") ("center") ("help") ("interp") ("js") ("offset") ("xrange") ("yrange")))
   ("set_vlt" pro nil (lib "ctool.pro" nil "JHU_APL_IDLUSR") "%s, wids" (nil ("hsv") ("rgb")))
   ("set_index" pro nil (lib "ctool.pro" nil "JHU_APL_IDLUSR") "%s, dat, val" (nil))
   ("ctool_event" pro nil (lib "ctool.pro" nil "JHU_APL_IDLUSR") "%s, ev" (nil))
   ("ctool" pro nil (lib "ctool.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("help")))
   ("xmess_event" pro nil (lib "xmess.pro" nil "JHU_APL_IDLUSR") "%s, ev" (nil))
   ("xmess" pro nil (lib "xmess.pro" nil "JHU_APL_IDLUSR") "%s, txt" (nil ("help") ("nowait") ("oktext") ("wait") ("wid") ("xoffset") ("yoffset")))
   ("eqv_plot" pro nil (lib "eqv.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("hard")))
   ("eqv_stat" pro nil (lib "eqv.pro" nil "JHU_APL_IDLUSR") "%s, d" (nil ("text")))
   ("sp2v" fun nil (lib "eqv.pro" nil "JHU_APL_IDLUSR") "Result = %s(p, smax, pmin, pmax)" (nil))
   ("sv2p" fun nil (lib "eqv.pro" nil "JHU_APL_IDLUSR") "Result = %s(v, smax, pmin, pmax)" (nil))
   ("eqv_compile" pro nil (lib "eqv.pro" nil "JHU_APL_IDLUSR") "%s, file" (nil ("discuss") ("equation") ("error") ("indv") ("number") ("out") ("par") ("psym") ("ptype") ("title") ("trange") ("xrange") ("xs") ("xtitle") ("xtype") ("yrange") ("ys") ("ytitle") ("ytype")))
   ("eqvlist_event" pro nil (lib "eqv.pro" nil "JHU_APL_IDLUSR") "%s, ev" (nil))
   ("eqvlist" pro nil (lib "eqv.pro" nil "JHU_APL_IDLUSR") "%s, list" (nil))
   ("eqv_event" pro nil (lib "eqv.pro" nil "JHU_APL_IDLUSR") "%s, ev" (nil))
   ("eqv" pro nil (lib "eqv.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("file") ("help") ("list") ("psym") ("snapshot") ("title") ("xs") ("xtitle") ("ys") ("ytitle")))
   ("xced1_event" pro nil (lib "xced1.pro" nil "JHU_APL_IDLUSR") "%s, ev" (nil))
   ("xced1" pro nil (lib "xced1.pro" nil "JHU_APL_IDLUSR") "%s, index" (nil ("exit_code") ("group_leader") ("help") ("hsv") ("title") ("wait")))
   ("xcursor" pro nil (lib "xcursor.pro" nil "JHU_APL_IDLUSR") "%s, x, y" (nil ("data") ("device") ("help") ("normal") ("order") ("text") ("xoffset") ("yoffset")))
   ("xdate_event" pro nil (lib "xdate.pro" nil "JHU_APL_IDLUSR") "%s, ev" (nil))
   ("xdate" pro nil (lib "xdate.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("ddef") ("dout") ("help") ("mdef") ("mlist") ("mout") ("number") ("title") ("ydef") ("ylist") ("yout")))
   ("xbb" pro nil (lib "xbb.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("group_leader") ("help") ("lines") ("nid") ("res") ("title") ("wid") ("xoffset") ("yoffset")))
   ("xlist_init" pro nil (lib "xlist.pro" nil "JHU_APL_IDLUSR") "%s, top" (nil ("init")))
   ("xlist_smode" fun nil (lib "xlist.pro" nil "JHU_APL_IDLUSR") "Result = %s(ev)" (nil))
   ("xlist_srch" pro nil (lib "xlist.pro" nil "JHU_APL_IDLUSR") "%s, ev" (nil))
   ("xlist_event" pro nil (lib "xlist.pro" nil "JHU_APL_IDLUSR") "%s, ev" (nil))
   ("xlist_m_event" pro nil (lib "xlist.pro" nil "JHU_APL_IDLUSR") "%s, ev" (nil))
   ("xlist" fun nil (lib "xlist.pro" nil "JHU_APL_IDLUSR") "Result = %s(list)" (nil ("help") ("highlight") ("index") ("itxt") ("maxscroll") ("multiple") ("out") ("search") ("smode") ("title") ("top") ("wait") ("xoffset") ("yoffset")))
   ("swap_nibbles" fun nil (lib "swap_nibbles.pro" nil "JHU_APL_IDLUSR") "Result = %s(bb)" (nil ("help")))
   ("xfiles_event" pro nil (lib "xfiles.pro" nil "JHU_APL_IDLUSR") "%s, ev" (nil))
   ("xfiles_update" pro nil (lib "xfiles.pro" nil "JHU_APL_IDLUSR") "%s, d" (nil))
   ("xfiles" pro nil (lib "xfiles.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("directory") ("files") ("help") ("newdirectory") ("newpattern") ("pattern") ("title") ("wait")))
   ("xsubdir_event" pro nil (lib "xsubdir.pro" nil "JHU_APL_IDLUSR") "%s, ev" (nil))
   ("xsubdir_list" pro nil (lib "xsubdir.pro" nil "JHU_APL_IDLUSR") "%s, d" (nil))
   ("xsubdir" pro nil (lib "xsubdir.pro" nil "JHU_APL_IDLUSR") "%s, out" (nil ("help") ("start") ("title") ("wait")))
   ("congrid8c" fun nil (lib "congrid8c.pro" nil "JHU_APL_IDLUSR") "Result = %s(in, nx, ny)" (nil ("_extra") ("blue") ("green") ("help") ("inblue") ("ingreen") ("inred") ("red")))
   ("xtxtin_event" pro nil (lib "xtxtin.pro" nil "JHU_APL_IDLUSR") "%s, ev" (nil))
   ("xtxtin" pro nil (lib "xtxtin.pro" nil "JHU_APL_IDLUSR") "%s, out" (nil ("cancel") ("clear") ("default") ("fdef") ("fout") ("ftag") ("group_leader") ("help") ("mblab") ("menu") ("ok") ("ptags") ("ptitle") ("pvals") ("row") ("title") ("top") ("xoffset") ("xsize") ("xtags") ("xvals") ("yoffset") ("ysize")))
   ("jsplot" pro nil (lib "jsplot.pro" nil "JHU_APL_IDLUSR") "%s, t, y0" (nil ("_extra") ("ccolor") ("charsize") ("charthick") ("color") ("format") ("gap") ("help") ("jsmajor") ("jsminor") ("labeloff") ("lat") ("linestyle") ("long") ("lshift") ("major") ("max_value") ("minor") ("nodata") ("off") ("over") ("psym") ("sun") ("symsize") ("thick") ("trange") ("xthick") ("xtick_get") ("xticklen") ("xticks") ("xtitle") ("ythick") ("ytick_get") ("zone")))
   ("thicken" pro nil (lib "thicken.pro" nil "JHU_APL_IDLUSR") "%s, img, clr" (nil ("bold") ("help") ("mask") ("nocenter") ("quiet") ("substitute")))
   ("gmt_offsec" fun nil (lib "gmt_offsec.pro" nil "JHU_APL_IDLUSR") "Result = %s" (nil ("help")))
   ("xhistpick_event" pro nil (lib "xhistpick.pro" nil "JHU_APL_IDLUSR") "%s, ev" (nil))
   ("xhistpick" pro nil (lib "xhistpick.pro" nil "JHU_APL_IDLUSR") "%s, xx, hh" (nil ("_extra") ("clip") ("error") ("group_leader") ("help") ("image") ("max") ("min") ("on_freeze") ("title") ("wait") ("window")))
   ("topcolors" pro nil (lib "topcolors.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("help") ("hue") ("put_hue") ("remap") ("top")))
   ("cbar" pro nil (lib "cbar.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("_extra") ("bottom") ("cclip") ("charsize") ("charthick") ("cmax") ("cmin") ("color") ("device") ("help") ("horizontal") ("keep_scaling") ("left") ("position") ("psave") ("right") ("title") ("top") ("vertical") ("vmax") ("vmin") ("xsave") ("ysave")))
   ("imgregion" fun nil (lib "imgregion.pro" nil "JHU_APL_IDLUSR") "Result = %s(in)" (nil ("help") ("missing") ("stats") ("window") ("x") ("y")))
   ("xoption" fun nil (lib "xoption.pro" nil "JHU_APL_IDLUSR") "Result = %s(txt)" (nil ("colors") ("default") ("ex2") ("exclusive") ("help") ("sub2options") ("sub2set") ("suboptions") ("subset") ("title") ("values") ("xoffset") ("yoffset")))
   ("boxcon" pro nil (lib "box1.pro" nil "JHU_APL_IDLUSR") "%s, x, y, dx, dy, x2, y2, dx2, dy2" (nil ("data") ("device") ("from_device") ("normal") ("to_device") ("xmx") ("ymx")))
   ("box1" pro nil (lib "box1.pro" nil "JHU_APL_IDLUSR") "%s, x0, y0, dx0, dy0" (nil ("color") ("data") ("device") ("dxrange") ("dyrange") ("exitcode") ("help") ("keep") ("menu") ("nomenu") ("normal") ("nostatus") ("setstat") ("shape") ("text")))
   ("rgb" pro nil (lib "rgb.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("help")))
   ("xview_print" pro nil (lib "xview.pro" nil "JHU_APL_IDLUSR") "%s, fname" (nil ("printer") ("trans")))
   ("udlist" pro nil (lib "xview.pro" nil "JHU_APL_IDLUSR") "%s, up" (nil ("noload")))
   ("tvimg" pro nil (lib "xview.pro" nil "JHU_APL_IDLUSR") "%s, name" (nil ("cinit") ("custom") ("imgsz") ("mag") ("rot") ("smax") ("type")))
   ("xview_event" pro nil (lib "xview.pro" nil "JHU_APL_IDLUSR") "%s, ev" (nil))
   ("xview" pro nil (lib "xview.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("directory") ("help") ("hotlist") ("ictxt") ("mag") ("read_custom") ("scroll_size") ("type") ("wild") ("write_custom")))
   ("extremes_2d" fun nil (lib "extremes_2d.pro" nil "JHU_APL_IDLUSR") "Result = %s(z, flag)" (nil ("edges") ("help") ("value")))
   ("axval" fun nil (lib "axval.pro" nil "JHU_APL_IDLUSR") "Result = %s(x1, x2, n)" (nil ("help")))
   ("dirmem" fun nil (lib "dirmem.pro" nil "JHU_APL_IDLUSR") "Result = %s(entry)" (nil ("alias") ("help") ("list") ("max_entries") ("read") ("write")))
   ("update_menu" pro nil (lib "xgetfile.pro" nil "JHU_APL_IDLUSR") "%s, map" (nil))
   ("update_list" pro nil (lib "xgetfile.pro" nil "JHU_APL_IDLUSR") "%s, map" (nil))
   ("xgetfile_event" pro nil (lib "xgetfile.pro" nil "JHU_APL_IDLUSR") "%s, ev" (nil))
   ("xgetfile" fun nil (lib "xgetfile.pro" nil "JHU_APL_IDLUSR") "Result = %s" (nil ("def_dir") ("get_file") ("get_path") ("help") ("set_file") ("set_path") ("text") ("wild_card")))
   ("lastplot" pro nil (lib "lastplot.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("help")))
   ("align" pro nil (lib "align.pro" nil "JHU_APL_IDLUSR") "%s, x, y, txt" (nil ("ax") ("ay") ("charsize") ("data") ("device") ("help") ("normal") ("xout") ("yout")))
   ("sunclock" pro nil (lib "sunclock.pro" nil "JHU_APL_IDLUSR") "%s, plat, plong" (nil ("_extra") ("color") ("help") ("lat") ("lng") ("quiet") ("same") ("time") ("usa") ("zone")))
   ("paint" pro nil (lib "paint.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("boundary") ("help") ("mag") ("size")))
   ("seedfill" pro nil (lib "seedfill.pro" nil "JHU_APL_IDLUSR") "%s, pix" (nil ("bound") ("error") ("fill") ("help") ("seed")))
   ("pltcrv_u" pro nil (lib "pltcrv.pro" nil "JHU_APL_IDLUSR") "%s, x, y, ixx, iyy" (nil ("pltopt") ("spline") ("sx") ("sy") ("x2") ("y2") ("ytyp")))
   ("pltcrv" pro nil (lib "pltcrv.pro" nil "JHU_APL_IDLUSR") "%s, x, y" (nil ("_extra") ("error") ("help") ("log") ("normalize") ("spline") ("sx") ("sy") ("x2") ("xfix") ("xrange") ("y2") ("yrange")))
   ("shade_surf2" pro nil (lib "shade_surf2.pro" nil "JHU_APL_IDLUSR") "%s, z, x, y" (nil ("_extra") ("gamma") ("help") ("shades")))
   ("xhotlist_update" pro nil (lib "xhotlist.pro" nil "JHU_APL_IDLUSR") "%s, map" (nil))
   ("xhotlist_event" pro nil (lib "xhotlist.pro" nil "JHU_APL_IDLUSR") "%s, ev" (nil))
   ("xhotlist" pro nil (lib "xhotlist.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("browse") ("description") ("file") ("help") ("out") ("readonly") ("title") ("value") ("xsize") ("ysize")))
   ("seedfillr" pro nil (lib "seedfillr.pro" nil "JHU_APL_IDLUSR") "%s, pix" (nil ("fill") ("help") ("seed")))
   ("crossi" pro nil (lib "crossi.pro" nil "JHU_APL_IDLUSR") "%s, x, y, zdv" (nil ("array") ("button") ("color") ("data") ("default") ("device") ("dialog") ("exitcode") ("help") ("hsv") ("instructions") ("izoom") ("js") ("keep") ("linestyle") ("mag") ("menu") ("nooptions") ("normal") ("nostatus") ("order") ("pixel") ("setstat") ("size") ("xformat") ("xmode") ("xsize") ("xypro") ("yformat") ("ysize")))
   ("cyph" pro nil (lib "cyph.pro" nil "JHU_APL_IDLUSR") "%s, data, time" (nil ("cpout") ("help") ("offset") ("slice") ("tout")))
   ("xplot" pro nil (lib "xcurve.pro" nil "JHU_APL_IDLUSR") "%s, x1, x2, y1, y2" (nil ("data") ("device") ("normal")))
   ("xcurve_pnts" pro nil (lib "xcurve.pro" nil "JHU_APL_IDLUSR") "%s, id, n" (nil))
   ("xcurve" pro nil (lib "xcurve.pro" nil "JHU_APL_IDLUSR") "%s, xa, ya" (nil ("data") ("device") ("help") ("mag") ("normal") ("size") ("step_min")))
   ("topc" fun nil (lib "topc.pro" nil "JHU_APL_IDLUSR") "Result = %s" (nil ("help")))
   ("subarr" pro nil (lib "subarr.pro" nil "JHU_APL_IDLUSR") "%s, x, y, z, x2, y2, z2" (nil ("help") ("xrange") ("yrange")))
   ("scramble" fun nil (lib "scramble.pro" nil "JHU_APL_IDLUSR") "Result = %s(a)" (nil ("help")))
   ("sphgc" pro nil (lib "sphgc.pro" nil "JHU_APL_IDLUSR") "%s, alng1, alat1, alng2, alat2, blng1, blat1, blng2, blat2, plng1, plat1, plng2, plat2" (nil ("flag") ("help")))
   ("ibilin" pro nil (lib "ibilin.pro" nil "JHU_APL_IDLUSR") "%s, x, y, xe, ye, fx, fy, flag" (nil ("help")))
   ("shade_img" pro nil (lib "shade_img.pro" nil "JHU_APL_IDLUSR") "%s, shd, c, r, g, b" (nil ("bin") ("gin") ("help") ("image") ("rin")))
   ("boxarea" pro nil (lib "boxarea.pro" nil "JHU_APL_IDLUSR") "%s, x1, y1, x2, y2" (nil ("flag") ("help")))
   ("xdatafile_update" pro nil (lib "xdatafile.pro" nil "JHU_APL_IDLUSR") "%s, map" (nil))
   ("xdatafile_event" pro nil (lib "xdatafile.pro" nil "JHU_APL_IDLUSR") "%s, ev" (nil))
   ("xdatafile" pro nil (lib "xdatafile.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("help") ("maxbuff")))
   ("pickcolor" pro nil (lib "pickcolor.pro" nil "JHU_APL_IDLUSR") "%s, in" (nil ("help")))
   ("xtextimg_up" pro nil (lib "xtextimg.pro" nil "JHU_APL_IDLUSR") "%s, m" (nil))
   ("xtextimg_event" pro nil (lib "xtextimg.pro" nil "JHU_APL_IDLUSR") "%s, ev" (nil))
   ("xtextimg" pro nil (lib "xtextimg.pro" nil "JHU_APL_IDLUSR") "%s, file" (nil ("help") ("out") ("wait") ("xsize") ("ysize")))
   ("jd2js" fun nil (lib "jd2js.pro" nil "JHU_APL_IDLUSR") "Result = %s(jd)" (nil ("help")))
   ("js2jd" fun nil (lib "js2jd.pro" nil "JHU_APL_IDLUSR") "Result = %s(js)" (nil ("help")))
   ("xhsbc_update" pro nil (lib "xhsbc.pro" nil "JHU_APL_IDLUSR") "%s, x, m, win, sz" (nil))
   ("xhsbc_event" pro nil (lib "xhsbc.pro" nil "JHU_APL_IDLUSR") "%s, ev" (nil))
   ("xhsbc" pro nil (lib "xhsbc.pro" nil "JHU_APL_IDLUSR") "%s, in, out" (nil ("help")))
   ("xxx_event" pro nil (lib "widget_temp.pro" nil "JHU_APL_IDLUSR") "%s, ev" (nil))
   ("xxx" pro nil (lib "widget_temp.pro" nil "JHU_APL_IDLUSR") "%s, in, out" (nil ("help")))
   ("ellipse" pro nil (lib "ellipse.pro" nil "JHU_APL_IDLUSR") "%s, a, b, tilt, a1, a2, xx, yy" (nil ("color") ("data") ("device") ("help") ("linestyle") ("norm")))
   ("imgwindow" fun nil (lib "imgwindow.pro" nil "JHU_APL_IDLUSR") "Result = %s(img, xmn, xmx, ymn, ymx)" (nil ("help")))
   ("movtxt" pro nil (lib "movtxt.pro" nil "JHU_APL_IDLUSR") "%s, txt" (nil ("data") ("device") ("help") ("normal")))
   ("detab" fun nil (lib "detab.pro" nil "JHU_APL_IDLUSR") "Result = %s(ina)" (nil ("help") ("tab")))
   ("gifadd" pro nil (lib "gifadd.pro" nil "JHU_APL_IDLUSR") "%s, list" (nil ("colors") ("dither") ("help") ("jpeg") ("pixmap")))
   ("imgmask_th" pro nil (lib "imgmask.pro" nil "JHU_APL_IDLUSR") "%s, m" (nil))
   ("imgmask_update" pro nil (lib "imgmask.pro" nil "JHU_APL_IDLUSR") "%s, m" (nil))
   ("imgmask_event" pro nil (lib "imgmask.pro" nil "JHU_APL_IDLUSR") "%s, ev" (nil))
   ("imgmask" pro nil (lib "imgmask.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("help")))
   ("lincal" pro nil (lib "lincal.pro" nil "JHU_APL_IDLUSR") "%s, dates" (nil ("charsize") ("hard") ("help") ("nodays") ("title")))
   ("webshadow" pro nil (lib "webshadow.pro" nil "JHU_APL_IDLUSR") "%s, image, back" (nil ("blur") ("color") ("dither") ("help") ("ijpeg") ("jpeg") ("shadow") ("trans") ("width")))
   ("vclip_out" fun nil (lib "vclip.pro" nil "JHU_APL_IDLUSR") "Result = %s(xmn, xmx, ymn, ymx, cx1, cx2, cy1, cy2)" (nil))
   ("vclip" pro nil (lib "vclip.pro" nil "JHU_APL_IDLUSR") "%s, x1, y1, x2, y2" (nil ("flag") ("help") ("xrange") ("yrange")))
   ("color_quanj" fun nil (lib "color_quanj.pro" nil "JHU_APL_IDLUSR") "Result = %s(red, grn, blu, r, g, b)" (nil ("colors") ("display") ("dither") ("help") ("order")))
   ("commalist" fun nil (lib "commalist.pro" nil "JHU_APL_IDLUSR") "Result = %s(arr, fmt)" (nil ("delimiter") ("help") ("nocommas")))
   ("imgscale" pro nil (lib "imgscale.pro" nil "JHU_APL_IDLUSR") "%s, input, output" (nil ("exit_code") ("help") ("saturate")))
   ("spawn2" pro nil (lib "spawn2.pro" nil "JHU_APL_IDLUSR") "%s, cmd, results" (nil ("_extra") ("count") ("help")))
   ("check5" fun nil (lib "check5.pro" nil "JHU_APL_IDLUSR") "Result = %s" (nil ("help")))
   ("sunjs" pro nil (lib "sunjs.pro" nil "JHU_APL_IDLUSR") "%s, js" (nil ("app_dec") ("app_lat") ("app_long") ("app_ra") ("carrington") ("dist") ("help") ("j2000_lat") ("j2000_long") ("lat0") ("list") ("long0") ("pa") ("sd") ("true_dec") ("true_lat") ("true_long") ("true_ra")))
   ("plural" fun nil (lib "plural.pro" nil "JHU_APL_IDLUSR") "Result = %s(n, sing, plur)" (nil ("help") ("number")))
   ("webtile" pro nil (lib "webtile.pro" nil "JHU_APL_IDLUSR") "%s, x, y" (nil ("color") ("fill") ("help") ("init") ("linestyle") ("notes") ("thick")))
   ("xcyph_event" pro nil (lib "xcyph.pro" nil "JHU_APL_IDLUSR") "%s, ev" (nil))
   ("xcyph" pro nil (lib "xcyph.pro" nil "JHU_APL_IDLUSR") "%s, data, time" (nil ("cpout") ("help") ("offset") ("range") ("slice") ("tout")))
   ("hget" fun nil (lib "hget.pro" nil "JHU_APL_IDLUSR") "Result = %s(h)" (nil ("error") ("help") ("no_copy")))
   ("hset" pro nil (lib "hset.pro" nil "JHU_APL_IDLUSR") "%s, h, v" (nil ("help") ("no_copy")))
   ("jpegscreen" pro nil (lib "jpegscreen.pro" nil "JHU_APL_IDLUSR") "%s, file" (nil ("help") ("quality")))
   ("sattrackaz" fun nil (lib "sattrackaz.pro" nil "JHU_APL_IDLUSR") "Result = %s(inc, lat)" (nil ("ascending") ("descending") ("help")))
   ("screenjpeg" pro nil (lib "screenjpeg.pro" nil "JHU_APL_IDLUSR") "%s, file" (nil ("error") ("help") ("mag") ("pixmap") ("window")))
   ("jpeg_mag" pro nil (lib "jpeg_mag.pro" nil "JHU_APL_IDLUSR") "%s, in, out" (nil ("help") ("mag")))
   ("lini" pro nil (lib "lini.pro" nil "JHU_APL_IDLUSR") "%s, a, b" (nil ("axfix") ("ayfix") ("azimuth") ("bxfix") ("byfix") ("data") ("device") ("fill") ("help") ("linestyle") ("mag") ("nohelp") ("normal") ("thickness")))
   ("magcrs_up" pro nil (lib "magcrs.pro" nil "JHU_APL_IDLUSR") "%s, x, y, st" (nil ("hor") ("ver")))
   ("magcrs" pro nil (lib "magcrs.pro" nil "JHU_APL_IDLUSR") "%s, x0, y0" (nil ("data") ("device") ("help") ("hor") ("initialize") ("mag") ("nocursor") ("normal") ("size") ("state") ("ver") ("window") ("xpos") ("ypos")))
   ("colorwarn" pro nil (lib "colorwarn.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("help") ("minimum") ("quiet")))
   ("tvcrs2" pro nil (lib "tvcrs2.pro" nil "JHU_APL_IDLUSR") "%s, x0, y0" (nil ("data") ("device") ("help") ("normal")))
   ("xmeter" pro nil (lib "xmeter.pro" nil "JHU_APL_IDLUSR") "%s, fr" (nil ("clear") ("help") ("initialize") ("title")))
   ("screengif" pro nil (lib "screengif.pro" nil "JHU_APL_IDLUSR") "%s, file" (nil ("error") ("help") ("image") ("window")))
   ("textpos" pro nil (lib "textpos.pro" nil "JHU_APL_IDLUSR") "%s, txt, p1, p2, ix, iy, sz, ang" (nil ("alignment") ("data") ("device") ("help") ("normal")))
   ("ydns2js" fun nil (lib "ydns2js.pro" nil "JHU_APL_IDLUSR") "Result = %s(yr, dn, sec)" (nil ("help")))
   ("map_put_scale" pro nil (lib "map_put_scale.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("error") ("help") ("info") ("noembed")))
   ("xyesno" fun nil (lib "xyesno.pro" nil "JHU_APL_IDLUSR") "Result = %s(txt)" (nil ("default") ("help") ("title")))
   ("map_set_scale" pro nil (lib "map_set_scale.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("color") ("command") ("error") ("help") ("image") ("info") ("list") ("newpos") ("noset") ("out") ("scale_factor")))
   ("epsinit" pro nil (lib "epsinit.pro" nil "JHU_APL_IDLUSR") "%s, outfile" (nil ("centimeters") ("color") ("help") ("quiet") ("vector") ("xsize") ("ysize")))
   ("epsterm" pro nil (lib "epsterm.pro" nil "JHU_APL_IDLUSR") "%s, q" (nil ("help")))
   ("earthrad" fun nil (lib "earthrad.pro" nil "JHU_APL_IDLUSR") "Result = %s(units)" (nil ("help")))
   ("date2jd" fun nil (lib "date2jd.pro" nil "JHU_APL_IDLUSR") "Result = %s(date)" (nil ("help")))
   ("refract" fun nil (lib "refract.pro" nil "JHU_APL_IDLUSR") "Result = %s(alt)" (nil ("help")))
   ("sun_zd" fun nil (lib "sun_zd.pro" nil "JHU_APL_IDLUSR") "Result = %s(lng, lat, t1, t2)" (nil ("azimuth") ("help") ("number") ("time") ("zone")))
   ("imgsqz" pro nil (lib "imgsqz.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("help") ("number")))
   ("sun_colors" pro nil (lib "sun_colors.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("deeper") ("help") ("quantized")))
   ("scale_rgb" pro nil (lib "scale_rgb.pro" nil "JHU_APL_IDLUSR") "%s, ri, gi, bi, ro, go, bo" (nil ("bot") ("error") ("help") ("inscale") ("outscale") ("top")))
   ("file_test" fun nil (lib "file_test.pro" nil "JHU_APL_IDLUSR") "Result = %s(file)" (nil ("contents") ("help")))
   ("texti" pro nil (lib "texti.pro" nil "JHU_APL_IDLUSR") "%s, text" (nil ("help")))
   ("concoord" pro nil (lib "concoord.pro" nil "JHU_APL_IDLUSR") "%s, x1, y1, x2, y2" (nil ("help") ("initialize") ("name1") ("name2") ("round") ("systems") ("to_1") ("to_2")))
   ("crossi2" pro nil (lib "crossi2.pro" nil "JHU_APL_IDLUSR") "%s, x, y, zdv" (nil ("button") ("color") ("data") ("default") ("details") ("device") ("dialog") ("exitcode") ("help") ("linestyle") ("mag") ("menu") ("normal") ("order") ("out") ("size") ("status_pro") ("xmode")))
   ("tarclr" fun nil (lib "tarclr.pro" nil "JHU_APL_IDLUSR") "Result = %s(a1, a2, a3)" (nil ("add") ("b24") ("blue") ("drop") ("green") ("help") ("hsv") ("init") ("list") ("noload") ("red") ("set")))
   ("dt_tm_range" pro nil (lib "dt_tm_range.pro" nil "JHU_APL_IDLUSR") "%s, in, js1, js2" (nil ("error") ("help") ("missing")))
   ("symasym" pro nil (lib "symasym_fft.pro" nil "JHU_APL_IDLUSR") "%s, in, sym, asym" (nil ("help") ("x") ("y")))
   ("dist_scale2" pro nil (lib "dist_scale2.pro" nil "JHU_APL_IDLUSR") "%s, x0, y0" (nil ("background") ("border") ("color") ("height") ("help") ("length") ("scale") ("size") ("thick") ("title")))
   ("state_name" fun nil (lib "state_name.pro" nil "JHU_APL_IDLUSR") "Result = %s(state)" (nil ("dash") ("help") ("lower") ("squeeze") ("under") ("upper")))
   ("congrid2" fun nil (lib "congrid2.pro" nil "JHU_APL_IDLUSR") "Result = %s(z, mx, my)" (nil ("centered") ("help") ("interpolate")))
   ("select_intervals" fun nil (lib "select_intervals.pro" nil "JHU_APL_IDLUSR") "Result = %s(rlo, rhi, ilo, ihi)" (nil ("all") ("any") ("help") ("most")))
   ("mapgci" pro nil (lib "mapgci.pro" nil "JHU_APL_IDLUSR") "%s, a, b" (nil ("help") ("linestyle") ("nohelp") ("notes") ("thickness") ("title") ("units")))
   ("dt_tm_full" fun nil (lib "dt_tm_full.pro" nil "JHU_APL_IDLUSR") "Result = %s(in, miss)" (nil ("error") ("help")))
   ("vumov_embedded_cmds" pro nil (lib "vumov.pro" nil "JHU_APL_IDLUSR") "%s, c_base, cmd" (nil))
   ("vumov_frame" pro nil (lib "vumov.pro" nil "JHU_APL_IDLUSR") "%s, aa, s, array" (nil))
   ("vumov_event" pro nil (lib "vumov.pro" nil "JHU_APL_IDLUSR") "%s, ev" (nil))
   ("vumov" pro nil (lib "vumov.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("buttons") ("commands") ("help") ("order")))
   ("lastchr" fun nil (lib "lastchr.pro" nil "JHU_APL_IDLUSR") "Result = %s(in, chr)" (nil ("help") ("remove")))
   ("iwindow_print" pro nil (lib "iwindow.pro" nil "JHU_APL_IDLUSR") "%s, info, pr" (nil ("eps") ("file") ("maxsize") ("noplot")))
   ("iwindow_pr" pro nil (lib "iwindow.pro" nil "JHU_APL_IDLUSR") "%s, ev" (nil))
   ("iwindow_proc" pro nil (lib "iwindow.pro" nil "JHU_APL_IDLUSR") "%s, ev" (nil))
   ("iwindow_opt" pro nil (lib "iwindow.pro" nil "JHU_APL_IDLUSR") "%s, ev" (nil))
   ("iwindow" pro nil (lib "iwindow.pro" nil "JHU_APL_IDLUSR") "%s, ss0" (nil ("annotate") ("epsmax") ("help") ("order") ("scale") ("title") ("win")))
   ("eqv_plot" pro nil (lib "eqvd.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("hard")))
   ("eqv_stat" pro nil (lib "eqvd.pro" nil "JHU_APL_IDLUSR") "%s, d" (nil ("text")))
   ("sp2v" fun nil (lib "eqvd.pro" nil "JHU_APL_IDLUSR") "Result = %s(p, smax, pmin, pmax)" (nil))
   ("sv2p" fun nil (lib "eqvd.pro" nil "JHU_APL_IDLUSR") "Result = %s(v, smax, pmin, pmax)" (nil))
   ("eqv_compile" pro nil (lib "eqvd.pro" nil "JHU_APL_IDLUSR") "%s, file" (nil ("discuss") ("equation") ("error") ("indv") ("number") ("out") ("par") ("psym") ("ptype") ("title") ("trange") ("xrange") ("xs") ("xtitle") ("xtype") ("yrange") ("ys") ("ytitle") ("ytype")))
   ("eqvlist_event" pro nil (lib "eqvd.pro" nil "JHU_APL_IDLUSR") "%s, ev" (nil))
   ("eqvlist" pro nil (lib "eqvd.pro" nil "JHU_APL_IDLUSR") "%s, list" (nil))
   ("eqv_event" pro nil (lib "eqvd.pro" nil "JHU_APL_IDLUSR") "%s, ev" (nil))
   ("eqvd" pro nil (lib "eqvd.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("file") ("help") ("list") ("psym") ("snapshot") ("title") ("window") ("xs") ("xtitle") ("ys") ("ytitle")))
   ("test2" pro nil (lib "test2.pro" nil "JHU_APL_IDLUSR") "%s" (nil))
   ("sunaltazi" pro nil (lib "sunaltazi.pro" nil "JHU_APL_IDLUSR") "%s, time, lng, lat, azi, alt" (nil ("error") ("help") ("norefract") ("sublat") ("sublng") ("zone")))
   ("izoomo_event" pro nil (lib "izoomo__define.pro" nil "JHU_APL_IDLUSR") "%s, ev" (nil))
   ("izoomo_xset" pro nil (lib "izoomo__define.pro" nil "JHU_APL_IDLUSR") "%s, obj" (nil))
   ("xset" pro "izoomo" (lib "izoomo__define.pro" nil "JHU_APL_IDLUSR") "Obj ->[%s::]%s" (nil))
   ("list" pro "izoomo" (lib "izoomo__define.pro" nil "JHU_APL_IDLUSR") "Obj ->[%s::]%s" (nil))
   ("help" pro "izoomo" (lib "izoomo__define.pro" nil "JHU_APL_IDLUSR") "Obj ->[%s::]%s" (nil))
   ("get" pro "izoomo" (lib "izoomo__define.pro" nil "JHU_APL_IDLUSR") "Obj ->[%s::]%s" (nil ("js_flag") ("mag") ("offset") ("xaxis") ("yaxis")))
   ("set" pro "izoomo" (lib "izoomo__define.pro" nil "JHU_APL_IDLUSR") "Obj ->[%s::]%s" (nil ("bar") ("bold") ("btitle") ("charsize") ("cmax") ("cmin") ("draw") ("interp") ("js") ("mag") ("position") ("title") ("vmax") ("vmin") ("xnew") ("xrange") ("xtitle") ("ynew") ("yrange") ("ytitle") ("znew")))
   ("draw" pro "izoomo" (lib "izoomo__define.pro" nil "JHU_APL_IDLUSR") "Obj ->[%s::]%s" (nil))
   ("init" fun "izoomo" (lib "izoomo__define.pro" nil "JHU_APL_IDLUSR") "Result = Obj ->[%s::]%s(x, y, z)" (nil ("_extra") ("help")))
   ("cleanup" pro "izoomo" (lib "izoomo__define.pro" nil "JHU_APL_IDLUSR") "Obj ->[%s::]%s" (nil))
   ("izoomo__define" pro nil (lib "izoomo__define.pro" nil "JHU_APL_IDLUSR") "%s" (nil))
   ("draw_wid_corr" pro nil (lib "draw_wid_corr.pro" nil "JHU_APL_IDLUSR") "%s, x, y, xc, yc" (nil ("help")))
   ("img_add" fun nil (lib "img_add.pro" nil "JHU_APL_IDLUSR") "Result = %s(img1, img2)" (nil ("error") ("help") ("wt1") ("wt2")))
   ("axis2" pro nil (lib "axis2.pro" nil "JHU_APL_IDLUSR") "%s, ix0, iy0" (nil ("align") ("charsize") ("color") ("declutter") ("guard") ("help") ("laboff") ("length") ("no25") ("nolabels") ("nominor") ("orientation") ("range") ("side") ("talign") ("tdelta") ("thickness") ("ticklength") ("title") ("tspace")))
   ("getpos" fun nil (lib "getpos.pro" nil "JHU_APL_IDLUSR") "Result = %s" (nil ("dev") ("help") ("norm")))
   ("firstchr" fun nil (lib "firstchr.pro" nil "JHU_APL_IDLUSR") "Result = %s(in, chr)" (nil ("help")))
   ("eqv3_print" pro nil (lib "eqv3.pro" nil "JHU_APL_IDLUSR") "%s, pnum, d" (nil))
   ("eqv3_plot" pro nil (lib "eqv3.pro" nil "JHU_APL_IDLUSR") "%s" (nil))
   ("eqv3_sp2v" fun nil (lib "eqv3.pro" nil "JHU_APL_IDLUSR") "Result = %s(p, smax, pmin, pmax)" (nil ("int")))
   ("eqv3_sv2p" fun nil (lib "eqv3.pro" nil "JHU_APL_IDLUSR") "Result = %s(v, smax, pmin, pmax)" (nil))
   ("eqv3_show_win" pro nil (lib "eqv3.pro" nil "JHU_APL_IDLUSR") "%s, top" (nil))
   ("eqv3_get_val" pro nil (lib "eqv3.pro" nil "JHU_APL_IDLUSR") "%s, top, val" (nil ("unlock")))
   ("eqv3_set_val" pro nil (lib "eqv3.pro" nil "JHU_APL_IDLUSR") "%s, top, val" (nil ("lock")))
   ("eqv3_compile" pro nil (lib "eqv3.pro" nil "JHU_APL_IDLUSR") "%s, file" (nil ("equation") ("error") ("exit_txt") ("flags") ("init_txt") ("par") ("text") ("title")))
   ("eqv3_quit" pro nil (lib "eqv3.pro" nil "JHU_APL_IDLUSR") "%s, d" (nil))
   ("eqv3_grabpar" pro nil (lib "eqv3.pro" nil "JHU_APL_IDLUSR") "%s, d, out" (nil))
   ("eqv3_event" pro nil (lib "eqv3.pro" nil "JHU_APL_IDLUSR") "%s, ev" (nil))
   ("eqv3" pro nil (lib "eqv3.pro" nil "JHU_APL_IDLUSR") "%s, file" (nil ("exitcode") ("group_leader") ("help") ("ok") ("p1") ("p2") ("p3") ("p4") ("p5") ("parvals") ("res") ("smax") ("top") ("wait") ("wid_ok") ("xoffset") ("yoffset")))
   ("exdiff" fun nil (lib "exdiff.pro" nil "JHU_APL_IDLUSR") "Result = %s(x)" (nil ("help")))
   ("eqv2_print" pro nil (lib "eqv2.pro" nil "JHU_APL_IDLUSR") "%s, pnum, d" (nil))
   ("eqv2_plot" pro nil (lib "eqv2.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("burn") ("erase")))
   ("eqv2_sp2v" fun nil (lib "eqv2.pro" nil "JHU_APL_IDLUSR") "Result = %s(p, smax, pmin, pmax)" (nil ("int")))
   ("eqv2_sv2p" fun nil (lib "eqv2.pro" nil "JHU_APL_IDLUSR") "Result = %s(v, smax, pmin, pmax)" (nil))
   ("eqv2_show_win" pro nil (lib "eqv2.pro" nil "JHU_APL_IDLUSR") "%s, top" (nil))
   ("eqv2_get_val" pro nil (lib "eqv2.pro" nil "JHU_APL_IDLUSR") "%s, top, val" (nil ("unlock")))
   ("eqv2_set_val" pro nil (lib "eqv2.pro" nil "JHU_APL_IDLUSR") "%s, top, val" (nil ("lock")))
   ("eqv2_compile" pro nil (lib "eqv2.pro" nil "JHU_APL_IDLUSR") "%s, file" (nil ("color") ("equation") ("error") ("number") ("par") ("title") ("var") ("xrange")))
   ("eqv2_event" pro nil (lib "eqv2.pro" nil "JHU_APL_IDLUSR") "%s, ev" (nil))
   ("eqv2" pro nil (lib "eqv2.pro" nil "JHU_APL_IDLUSR") "%s, file" (nil ("color") ("group_leader") ("help") ("ok") ("smax") ("top") ("wid_ok")))
   ("text_block" pro nil (lib "text_block.pro" nil "JHU_APL_IDLUSR") "%s, out" (nil ("help") ("quiet")))
   ("cw_bitlights_update" pro nil (lib "cw_bitlights.pro" nil "JHU_APL_IDLUSR") "%s, s" (nil))
   ("cw_bitlights_get_value" fun nil (lib "cw_bitlights.pro" nil "JHU_APL_IDLUSR") "Result = %s(id)" (nil))
   ("cw_bitlights_set_value" pro nil (lib "cw_bitlights.pro" nil "JHU_APL_IDLUSR") "%s, id, val00" (nil))
   ("cw_bitlights_realize" pro nil (lib "cw_bitlights.pro" nil "JHU_APL_IDLUSR") "%s, root" (nil))
   ("cw_bitlights" fun nil (lib "cw_bitlights.pro" nil "JHU_APL_IDLUSR") "Result = %s(parent)" (nil ("format") ("frame") ("help") ("hue") ("label") ("noglare") ("pack") ("reverse") ("sat") ("show") ("strip") ("title") ("uvalue") ("value")))
   ("tag_test" fun nil (lib "tag_test.pro" nil "JHU_APL_IDLUSR") "Result = %s(ss, tag)" (nil ("help")))
   ("getenv2" fun nil (lib "getenv2.pro" nil "JHU_APL_IDLUSR") "Result = %s(var)" (nil ("help") ("list")))
   ("eqv_plot" pro nil (lib "eqv2_font.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("burn") ("erase")))
   ("sp2v" fun nil (lib "eqv2_font.pro" nil "JHU_APL_IDLUSR") "Result = %s(p, smax, pmin, pmax)" (nil ("int")))
   ("sv2p" fun nil (lib "eqv2_font.pro" nil "JHU_APL_IDLUSR") "Result = %s(v, smax, pmin, pmax)" (nil))
   ("eqv2_compile" pro nil (lib "eqv2_font.pro" nil "JHU_APL_IDLUSR") "%s, file" (nil ("equation") ("error") ("number") ("par") ("title") ("var") ("xrange")))
   ("eqv2_event" pro nil (lib "eqv2_font.pro" nil "JHU_APL_IDLUSR") "%s, ev" (nil))
   ("eqv2" pro nil (lib "eqv2_font.pro" nil "JHU_APL_IDLUSR") "%s, file" (nil ("color") ("help") ("size")))
   ("mapgc" pro nil (lib "mapgc.pro" nil "JHU_APL_IDLUSR") "%s, x1, y1, x2, y2" (nil ("azimuth") ("color") ("help") ("linestyle") ("noplot") ("number") ("psym") ("range") ("stepsize") ("thickness") ("units") ("xout") ("yout")))
   ("limbox" pro nil (lib "limbox.pro" nil "JHU_APL_IDLUSR") "%s, lim" (nil ("exit") ("help")))
   ("wgs_84" fun nil (lib "wgs_84.pro" nil "JHU_APL_IDLUSR") "Result = %s" (nil ("geocentric") ("geodetic") ("help") ("lat")))
   ("plot_limbox" pro nil (lib "plot_limbox.pro" nil "JHU_APL_IDLUSR") "%s, lim" (nil ("color") ("help") ("linestyle") ("rect") ("thickness")))
   ("loglut" fun nil (lib "loglut.pro" nil "JHU_APL_IDLUSR") "Result = %s(lo, hi)" (nil ("exponent") ("ghi") ("glo") ("help") ("reverse") ("round")))
   ("date2doy" pro nil (lib "date2doy.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("file") ("first") ("help") ("last")))
   ("cw_magimage_update" pro nil (lib "cw_magimage.pro" nil "JHU_APL_IDLUSR") "%s, s" (nil))
   ("cw_magimage_get_value" fun nil (lib "cw_magimage.pro" nil "JHU_APL_IDLUSR") "Result = %s(id)" (nil))
   ("cw_magimage_set_value" pro nil (lib "cw_magimage.pro" nil "JHU_APL_IDLUSR") "%s, id, img" (nil))
   ("cw_magimage_event" fun nil (lib "cw_magimage.pro" nil "JHU_APL_IDLUSR") "Result = %s(ev)" (nil))
   ("cw_magimage_realize" pro nil (lib "cw_magimage.pro" nil "JHU_APL_IDLUSR") "%s, root" (nil))
   ("cw_magimage" fun nil (lib "cw_magimage.pro" nil "JHU_APL_IDLUSR") "Result = %s(parent)" (nil ("dx") ("dy") ("frame") ("help") ("reduction") ("title") ("uvalue") ("xsize") ("ysize")))
   ("grab_commands" pro nil (lib "grab_commands.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("file") ("help") ("setfile")))
   ("eqv2_load_help" pro nil (lib "eqv2_load_help.pro" nil "JHU_APL_IDLUSR") "%s, t_1, t_2, t_3, t_4, t_5, t_6, t_7, t_8, t_9" (nil))
   ("xautohelp" pro nil (lib "xautohelp.pro" nil "JHU_APL_IDLUSR") "%s, ev, text" (nil ("delimiter") ("display") ("help") ("more_help") ("noclear")))
   ("globe_plot" pro nil (lib "globe_plot.pro" nil "JHU_APL_IDLUSR") "%s, lat, lng" (nil))
   ("tags_match" pro nil (lib "tags_match.pro" nil "JHU_APL_IDLUSR") "%s, s1, s2, list" (nil ("help") ("quiet")))
   ("xautohelp_example_event" pro nil (lib "xautohelp_example.pro" nil "JHU_APL_IDLUSR") "%s, ev" (nil))
   ("xautohelp_example" pro nil (lib "xautohelp_example.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("detached") ("help") ("text")))
   ("xloglut_tv" pro nil (lib "xloglut.pro" nil "JHU_APL_IDLUSR") "%s" (nil))
   ("xloglut_sp2v" fun nil (lib "xloglut.pro" nil "JHU_APL_IDLUSR") "Result = %s(p, smax, pmin, pmax)" (nil ("int")))
   ("xloglut_sv2p" fun nil (lib "xloglut.pro" nil "JHU_APL_IDLUSR") "Result = %s(v, smax, pmin, pmax)" (nil))
   ("xloglut_show_win" pro nil (lib "xloglut.pro" nil "JHU_APL_IDLUSR") "%s, top" (nil))
   ("xloglut_get_val" pro nil (lib "xloglut.pro" nil "JHU_APL_IDLUSR") "%s, top, val" (nil ("unlock")))
   ("xloglut_set_val" pro nil (lib "xloglut.pro" nil "JHU_APL_IDLUSR") "%s, top, val" (nil ("lock")))
   ("xloglut_event" pro nil (lib "xloglut.pro" nil "JHU_APL_IDLUSR") "%s, ev" (nil))
   ("xloglut" pro nil (lib "xloglut.pro" nil "JHU_APL_IDLUSR") "%s, img" (nil))
   ("cw_stripchart_replot" pro nil (lib "cw_stripchart.pro" nil "JHU_APL_IDLUSR") "%s, s" (nil))
   ("cw_stripchart_get_value" fun nil (lib "cw_stripchart.pro" nil "JHU_APL_IDLUSR") "Result = %s(id)" (nil))
   ("cw_stripchart_set_value" pro nil (lib "cw_stripchart.pro" nil "JHU_APL_IDLUSR") "%s, id, val" (nil))
   ("cw_stripchart_event" fun nil (lib "cw_stripchart.pro" nil "JHU_APL_IDLUSR") "Result = %s(ev)" (nil))
   ("cw_stripchart_cleanup" pro nil (lib "cw_stripchart.pro" nil "JHU_APL_IDLUSR") "%s, id" (nil))
   ("cw_stripchart_realize" pro nil (lib "cw_stripchart.pro" nil "JHU_APL_IDLUSR") "%s, root" (nil))
   ("cw_stripchart" fun nil (lib "cw_stripchart.pro" nil "JHU_APL_IDLUSR") "Result = %s(parent, nx, ny)" (nil ("c_axes") ("c_back") ("c_plot") ("charsize") ("frame") ("help") ("key") ("no25") ("nominor") ("rpos") ("title") ("uvalue") ("value") ("x_scroll") ("xrange") ("xwidth") ("yfixed") ("yrange") ("ysize") ("ytitle")))
   ("cw_droplist2_select" pro nil (lib "cw_droplist2.pro" nil "JHU_APL_IDLUSR") "%s, id, indx" (nil))
   ("cw_droplist2_make" pro nil (lib "cw_droplist2.pro" nil "JHU_APL_IDLUSR") "%s, base, value, num" (nil ("bb0") ("dynamic_resize")))
   ("cw_droplist2_get_value" fun nil (lib "cw_droplist2.pro" nil "JHU_APL_IDLUSR") "Result = %s(id)" (nil))
   ("cw_droplist2_set_value" pro nil (lib "cw_droplist2.pro" nil "JHU_APL_IDLUSR") "%s, id, val" (nil))
   ("cw_droplist2_event" fun nil (lib "cw_droplist2.pro" nil "JHU_APL_IDLUSR") "Result = %s(ev)" (nil))
   ("cw_droplist2" fun nil (lib "cw_droplist2.pro" nil "JHU_APL_IDLUSR") "Result = %s(parent)" (nil ("dynamic_resize") ("help") ("list") ("num") ("update") ("uvalue") ("value")))
   ("textplot" pro nil (lib "textplot.pro" nil "JHU_APL_IDLUSR") "%s, x, y, txt" (nil ("alignment") ("anti") ("bold") ("box") ("charsize") ("code") ("color") ("data") ("device") ("factor") ("fill") ("front_code") ("help") ("href") ("image") ("margin") ("noplot") ("normalized") ("offset") ("orient") ("pixels") ("set") ("shift") ("tail_code") ("test") ("xbox") ("xcrop") ("ybox") ("ycrop")))
   ("colors8bit" pro nil (lib "colors8bit.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("black") ("help") ("white")))
   ("spl_angint" fun nil (lib "spl_angint.pro" nil "JHU_APL_IDLUSR") "Result = %s(r, a0, a2)" (nil ("closed") ("degrees") ("help")))
   ("exif_reader" pro nil (lib "exif_reader.pro" nil "JHU_APL_IDLUSR") "%s, file, values" (nil ("description") ("error") ("help") ("list") ("out") ("tags")))
   ("img_plotp" fun nil (lib "img_plotp.pro" nil "JHU_APL_IDLUSR") "Result = %s(img, x, y, p)" (nil ("antialiased") ("clip") ("color") ("data") ("device") ("error") ("help") ("linestyle") ("normalized") ("psym") ("symsize") ("thick")))
   ("c2rgb" pro nil (lib "c2rgb.pro" nil "JHU_APL_IDLUSR") "%s, c, r, g, b" (nil ("help")))
   ("world_sunzd" fun nil (lib "world_sunzd.pro" nil "JHU_APL_IDLUSR") "Result = %s(time0, res)" (nil ("help") ("sunlat") ("sunlng") ("zone")))
   ("numfrac" fun nil (lib "numfrac.pro" nil "JHU_APL_IDLUSR") "Result = %s(val, dec)" (nil ("digits") ("help")))
   ("mandel_gif" pro nil (lib "mandel_gif.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("help")))
   ("putbits" fun nil (lib "putbits.pro" nil "JHU_APL_IDLUSR") "Result = %s(src0, tar, start, num)" (nil ("help")))
   ("getbits" fun nil (lib "getbits.pro" nil "JHU_APL_IDLUSR") "Result = %s(in, start, num0)" (nil ("help") ("reduce")))
   ("win_open" fun nil (lib "win_open.pro" nil "JHU_APL_IDLUSR") "Result = %s(win)" (nil ("help")))
   ("showbits" pro nil (lib "showbits.pro" nil "JHU_APL_IDLUSR") "%s, v" (nil ("binary") ("full") ("group") ("help") ("hex") ("n") ("octal") ("out") ("quiet")))
   ("convert_list" fun nil (lib "convert_list.pro" nil "JHU_APL_IDLUSR") "Result = %s(txt0)" (nil ("help")))
   ("one2three" pro nil (lib "one2three.pro" nil "JHU_APL_IDLUSR") "%s, in, arr, inx, iny, inz" (nil ("help")))
   ("map_set2" pro nil (lib "map_set2.pro" nil "JHU_APL_IDLUSR") "%s, lat0, lng0, ang0" (nil ("_extra")))
   ("zero_int" fun nil (lib "zero_int.pro" nil "JHU_APL_IDLUSR") "Result = %s(val)" (nil ("help") ("null")))
   ("int_low" fun nil (lib "int_low.pro" nil "JHU_APL_IDLUSR") "Result = %s(in)" (nil ("help") ("type")))
   ("map_pixdeg" pro nil (lib "map_pixdeg.pro" nil "JHU_APL_IDLUSR") "%s, pix" (nil ("eastwest") ("error") ("help")))
   ("maplatlong" pro nil (lib "maplatlong.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("error") ("help") ("noexpand") ("quiet") ("range") ("space") ("step")))
   ("yy2yyyy" fun nil (lib "yy2yyyy.pro" nil "JHU_APL_IDLUSR") "Result = %s(yy0)" (nil ("base") ("help") ("past")))
   ("monthnum" fun nil (lib "monthnum.pro" nil "JHU_APL_IDLUSR") "Result = %s(name)" (nil ("help")))
   ("getgroup" fun nil (lib "getgroup.pro" nil "JHU_APL_IDLUSR") "Result = %s(a, nth, mth)" (nil ("help") ("last") ("location") ("longest")))
   ("ngroups" fun nil (lib "ngroups.pro" nil "JHU_APL_IDLUSR") "Result = %s(a)" (nil ("help") ("length") ("start")))
   ("win_redirect" pro nil (lib "win_redirect.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("cleanup") ("help") ("off") ("on") ("status")))
   ("win_copy" pro nil (lib "win_copy.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("help")))
   ("colorize" pro nil (lib "colorize.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("colors") ("help") ("image")))
   ("posbox" pro nil (lib "posbox.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("color") ("device") ("help") ("plot") ("position") ("visible") ("x") ("y")))
   ("exif_reader50" pro nil (lib "exif_reader50.pro" nil "JHU_APL_IDLUSR") "%s, file, values" (nil ("description") ("error") ("help") ("list") ("out") ("tags")))
   ("ingest_bindata" fun nil (lib "ingest_bindata.pro" nil "JHU_APL_IDLUSR") "Result = %s(text, bin)" (nil ("check") ("comments") ("details") ("error") ("help") ("lencheck") ("nocopy") ("quiet") ("revbits") ("swap_endian") ("tot_bytes")))
   ("bitexplode" pro nil (lib "bitexplode.pro" nil "JHU_APL_IDLUSR") "%s, byt_arr, bit_arr" (nil ("help")))
   ("map_test_scale_ovrplot" pro nil (lib "map_test_scale.pro" nil "JHU_APL_IDLUSR") "%s" (nil))
   ("map_test_scale" pro nil (lib "map_test_scale.pro" nil "JHU_APL_IDLUSR") "%s" (nil))
   ("mapwindow" pro nil (lib "mapwindow.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("color") ("error") ("help") ("ix1") ("ix2") ("iy1") ("iy2") ("nx") ("ny") ("outline") ("quiet") ("thickness")))
   ("maplatlong_grid" pro nil (lib "maplatlong_grid.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("bold") ("charsize") ("color") ("gridpix") ("help") ("labels") ("lcolor") ("linestyle") ("margins") ("noplot") ("thickness") ("tick") ("xdelta") ("ydelta")))
   ("gif2png" pro nil (lib "gif2png.pro" nil "JHU_APL_IDLUSR") "%s, file" (nil ("help")))
   ("iglobe" pro nil (lib "iglobe.pro" nil "JHU_APL_IDLUSR") "%s, y00, x00, a00" (nil ("back") ("cgrid") ("coast") ("countries") ("grid") ("help") ("hor") ("land") ("nocolor") ("water")))
   ("dayglobe" pro nil (lib "dayglobe.pro" nil "JHU_APL_IDLUSR") "%s, lat0, lng0, ang0" (nil ("black") ("cgrid") ("charsize") ("color") ("countries") ("deeper") ("fine") ("grid") ("help") ("outcharsize") ("point") ("position") ("quantized") ("sat_rad") ("stereo") ("time") ("zone")))
   ("img_disp" pro nil (lib "img_disp.pro" nil "JHU_APL_IDLUSR") "%s, imag" (nil ("addsize") ("current") ("error") ("group_leader") ("help") ("mag") ("order") ("smag") ("title") ("x_scr") ("xpos") ("y_scr") ("ypos")))
   ("cw_dslider_get_value" fun nil (lib "cw_dslider.pro" nil "JHU_APL_IDLUSR") "Result = %s(id)" (nil))
   ("cw_dslider_set_value" pro nil (lib "cw_dslider.pro" nil "JHU_APL_IDLUSR") "%s, id, val" (nil))
   ("cw_dslider_event" fun nil (lib "cw_dslider.pro" nil "JHU_APL_IDLUSR") "Result = %s(ev)" (nil))
   ("cw_dslider_realize" pro nil (lib "cw_dslider.pro" nil "JHU_APL_IDLUSR") "%s, root" (nil))
   ("cw_dslider" fun nil (lib "cw_dslider.pro" nil "JHU_APL_IDLUSR") "Result = %s(parent)" (nil ("color") ("frame") ("help") ("horizontal") ("maximum") ("minimum") ("size") ("uvalue") ("value") ("vertical")))
   ("file_search2" fun nil (lib "file_search2.pro" nil "JHU_APL_IDLUSR") "Result = %s(pat)" (nil ("_extra") ("count") ("dir") ("help") ("sort")))
   ("lgradient" fun nil (lib "lgradient.pro" nil "JHU_APL_IDLUSR") "Result = %s(nx, ny, ang, dst)" (nil ("help")))
   ("iglobe_h" pro nil (lib "iglobe_h.pro" nil "JHU_APL_IDLUSR") "%s, y00, x00, a00" (nil ("back") ("cgrid") ("coast") ("countries") ("grid") ("help") ("hor") ("land") ("nocolor") ("water")))
   ("imgarray" pro nil (lib "imgarray.pro" nil "JHU_APL_IDLUSR") "%s, list" (nil ("help") ("margin") ("mcolor") ("nx") ("ny") ("reduction") ("save") ("xsize") ("ysize")))
   ("plotsh" pro nil (lib "plotsh.pro" nil "JHU_APL_IDLUSR") "%s, x, y" (nil ("_extra") ("color") ("device") ("help") ("normalized") ("scolor") ("xoff") ("yoff")))
   ("isnumber" fun nil (lib "isnumber.pro" nil "JHU_APL_IDLUSR") "Result = %s(txt0, x)" (nil ("help")))
   ("array_list" pro nil (lib "array_list.pro" nil "JHU_APL_IDLUSR") "%s, a" (nil ("format") ("front") ("help") ("indent") ("maxlen") ("out") ("quiet") ("trim") ("type")))
   ("crs_edit" pro nil (lib "crs_edit.pro" nil "JHU_APL_IDLUSR") "%s, img, msk" (nil ("help") ("hot")))
   ("sph_range_map" fun nil (lib "sph_range_map.pro" nil "JHU_APL_IDLUSR") "Result = %s(lng0, lat0, res)" (nil ("help") ("nx") ("ny")))
   ("readm" pro nil (lib "readm.pro" nil "JHU_APL_IDLUSR") "%s, b, a1, a2, a3, a4, a5, a6, a7, a8, a9" (nil ("help")))
   ("strfind" pro nil (lib "strfind.pro" nil "JHU_APL_IDLUSR") "%s, txt, sub" (nil ("count") ("help") ("index") ("inverse") ("quiet")))
   ("grid" pro nil (lib "grid.pro" nil "JHU_APL_IDLUSR") "%s, dx0, dy0" (nil ("color") ("help") ("number")))
   ("map_state_restore" pro nil (lib "map_state_restore.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("help")))
   ("png2jpeg" pro nil (lib "png2jpeg.pro" nil "JHU_APL_IDLUSR") "%s, file" (nil ("help") ("jpeg") ("mag") ("qf")))
   ("plotp" pro nil (lib "plotp.pro" nil "JHU_APL_IDLUSR") "%s, x0, y0, p0" (nil ("clip") ("color") ("data") ("device") ("help") ("linestyle") ("normalized") ("psym") ("symsize") ("thick")))
   ("map_state_save" pro nil (lib "map_state_save.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("help")))
   ("exif_reader" pro nil (lib "exif_reader_uint.pro" nil "JHU_APL_IDLUSR") "%s, file, values" (nil ("description") ("error") ("help") ("list") ("out") ("tags")))
   ("endian" fun nil (lib "endian.pro" nil "JHU_APL_IDLUSR") "Result = %s" (nil ("help") ("list") ("text")))
   ("dt_tm_mak_sub" pro nil (lib "dt_tm_mak_sub.pro" nil "JHU_APL_IDLUSR") "%s, fmt, txt, code, sub" (nil))
   ("xget_imgdsc_event" pro nil (lib "xget_imgdsc.pro" nil "JHU_APL_IDLUSR") "%s, ev" (nil))
   ("xget_imgdsc" pro nil (lib "xget_imgdsc.pro" nil "JHU_APL_IDLUSR") "%s, out" (nil ("help") ("nx") ("ny") ("offset") ("title") ("type")))
   ("aztick" fun nil (lib "aztick.pro" nil "JHU_APL_IDLUSR") "Result = %s(ax, ind, val)" (nil ("help")))
   ("screenpng" pro nil (lib "screenpng.pro" nil "JHU_APL_IDLUSR") "%s, file" (nil ("error") ("help") ("image") ("iwin") ("mag") ("noexecute") ("pixmap") ("window")))
   ("mov2gifs" pro nil (lib "mov2gifs.pro" nil "JHU_APL_IDLUSR") "%s, file" (nil ("help") ("start") ("step") ("stop")))
   ("zwindow" pro nil (lib "zwindow.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("blu") ("close") ("copy") ("free") ("get") ("grn") ("help") ("image") ("list") ("n_colors") ("red") ("xsize") ("ysize")))
   ("mean2" fun nil (lib "mean2.pro" nil "JHU_APL_IDLUSR") "Result = %s(a, dim)" (nil ("double") ("help") ("nan")))
   ("histplot" pro nil (lib "histplot.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("array") ("binwidth") ("help") ("info") ("instructions") ("xpos") ("ypos") ("yreversed")))
   ("vnorm" fun nil (lib "vnorm.pro" nil "JHU_APL_IDLUSR") "Result = %s(val, scale, offset)" (nil ("help")))
   ("map_proj_text" pro nil (lib "map_proj_text.pro" nil "JHU_APL_IDLUSR") "%s, txt" (nil ("help")))
   ("help" pro "timer" (lib "timer__define.pro" nil "JHU_APL_IDLUSR") "Obj ->[%s::]%s" (nil))
   ("time" pro "timer" (lib "timer__define.pro" nil "JHU_APL_IDLUSR") "Obj ->[%s::]%s" (nil ("text")))
   ("reset" pro "timer" (lib "timer__define.pro" nil "JHU_APL_IDLUSR") "Obj ->[%s::]%s" (nil))
   ("get" pro "timer" (lib "timer__define.pro" nil "JHU_APL_IDLUSR") "Obj ->[%s::]%s, diff" (nil))
   ("init" fun "timer" (lib "timer__define.pro" nil "JHU_APL_IDLUSR") "Result = Obj ->[%s::]%s" (nil ("text")))
   ("timer__define" pro nil (lib "timer__define.pro" nil "JHU_APL_IDLUSR") "%s" (nil))
   ("str_cliptrail0" fun nil (lib "str_cliptrail0.pro" nil "JHU_APL_IDLUSR") "Result = %s(a)" (nil ("help") ("ndec")))
   ("rcplot" pro nil (lib "rcplot.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("array") ("help") ("mag") ("mxpos") ("mypos") ("pxpos") ("pxsize") ("pypos") ("pysize") ("size") ("yrange") ("yreversed")))
   ("wavelength_to_hue" pro nil (lib "wavelength_to_hue.pro" nil "JHU_APL_IDLUSR") "%s, wav0, hue, sat" (nil ("help")))
   ("eqv3_load_help" pro nil (lib "eqv3_load_help.pro" nil "JHU_APL_IDLUSR") "%s, t_1, t_2, t_3, t_4, t_5, t_6, t_7, t_8, t_9" (nil))
   ("stddev2" fun nil (lib "stddev2.pro" nil "JHU_APL_IDLUSR") "Result = %s(x, dim)" (nil ("double") ("exp_mean") ("help") ("mean") ("nan") ("number")))
   ("widget_getoffset" pro nil (lib "widget_getoffset.pro" nil "JHU_APL_IDLUSR") "%s, wid, xout, yout" (nil ("error") ("help") ("position")))
   ("ximg" pro nil (lib "ximg.pro" nil "JHU_APL_IDLUSR") "%s, img" (nil ("a1") ("a2") ("a3") ("a4") ("a5") ("help") ("lat") ("lon") ("t1") ("t2") ("t3") ("t4") ("t5") ("units")))
   ("testimg" pro nil (lib "testimg.pro" nil "JHU_APL_IDLUSR") "%s, img" (nil))
   ("cposprint" pro nil (lib "cposprint.pro" nil "JHU_APL_IDLUSR") "%s, s" (nil ("help") ("show")))
   ("digits_get" fun nil (lib "digits_get.pro" nil "JHU_APL_IDLUSR") "Result = %s(x)" (nil ("help") ("ndigits")))
   ("js_incmonth" fun nil (lib "js_incmonth.pro" nil "JHU_APL_IDLUSR") "Result = %s(js, n)" (nil ("help")))
   ("distance_scale" pro nil (lib "distance_scale.pro" nil "JHU_APL_IDLUSR") "%s, ix0, iy0" (nil ("align") ("charsize") ("color") ("help") ("length") ("orientation") ("scale") ("talign") ("thickness") ("ticklength") ("tspace") ("u1") ("u2")))
   ("pngscreen" pro nil (lib "pngscreen.pro" nil "JHU_APL_IDLUSR") "%s, file" (nil ("help")))
   ("hexdump" pro nil (lib "hexdump.pro" nil "JHU_APL_IDLUSR") "%s, file" (nil ("help") ("lines") ("nbytes")))
   ("ellipsoid_int" pro nil (lib "ellipsoid_int.pro" nil "JHU_APL_IDLUSR") "%s, x1, y1, z1, x2, y2, z2, a, b, xi, yi, zi" (nil ("debug") ("flag") ("help") ("lat") ("lng") ("refresh")))
   ("build_arr_struct" fun nil (lib "build_arr_struct.pro" nil "JHU_APL_IDLUSR") "Result = %s(tags, vals)" (nil ("help") ("name")))
   ("map_put_bytes" pro nil (lib "map_put_bytes.pro" nil "JHU_APL_IDLUSR") "%s, code, bb" (nil ("error") ("help") ("reset")))
   ("map_get_bytes" pro nil (lib "map_get_bytes.pro" nil "JHU_APL_IDLUSR") "%s, code, bb" (nil ("error") ("help") ("image") ("list")))
   ("make_window" pro nil (lib "make_window.pro" nil "JHU_APL_IDLUSR") "%s, xs, ys" (nil ("help") ("title") ("x_scr") ("xpos") ("y_scr") ("ypos")))
   ("ell_merc" pro nil (lib "ell_merc.pro" nil "JHU_APL_IDLUSR") "%s, p1, p2" (nil ("clng") ("err") ("help") ("lat") ("lng") ("map_a") ("scale") ("x") ("y")))
   ("color_wheel" pro nil (lib "color_wheel.pro" nil "JHU_APL_IDLUSR") "%s, clr" (nil ("help") ("size") ("varywheel") ("xpos") ("ypos")))
   ("digits_put" fun nil (lib "digits_put.pro" nil "JHU_APL_IDLUSR") "Result = %s(d)" (nil ("help")))
   ("fast_map" pro nil (lib "fast_map.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("help")))
   ("cw_mcled_update" pro nil (lib "cw_mcled.pro" nil "JHU_APL_IDLUSR") "%s, s" (nil))
   ("cw_mcled_get_value" fun nil (lib "cw_mcled.pro" nil "JHU_APL_IDLUSR") "Result = %s(id)" (nil))
   ("cw_mcled_set_value" pro nil (lib "cw_mcled.pro" nil "JHU_APL_IDLUSR") "%s, id, val" (nil))
   ("cw_mcled_realize" pro nil (lib "cw_mcled.pro" nil "JHU_APL_IDLUSR") "%s, root" (nil))
   ("cw_mcled" fun nil (lib "cw_mcled.pro" nil "JHU_APL_IDLUSR") "Result = %s(parent)" (nil ("frame") ("help") ("hue") ("label") ("noglare") ("pack") ("sat") ("title") ("uvalue") ("value")))
   ("img_split" pro nil (lib "img_split.pro" nil "JHU_APL_IDLUSR") "%s, img, r, g, b" (nil ("error") ("help") ("hsv") ("nx") ("ny") ("true")))
   ("map_outline" pro nil (lib "map_outine.pro" nil "JHU_APL_IDLUSR") "%s, map" (nil ("charsize") ("color") ("help") ("label") ("linestyle") ("nooutline") ("reset") ("thickness")))
   ("size_img" pro nil (lib "size_img.pro" nil "JHU_APL_IDLUSR") "%s, img" (nil ("error") ("help") ("nx") ("ny") ("true")))
   ("img_interpolate" fun nil (lib "img_interpolate.pro" nil "JHU_APL_IDLUSR") "Result = %s(img, x, y)" (nil ("_extra") ("error") ("help")))
   ("map_space" pro nil (lib "map_space.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("help")))
   ("ell_loxodrome" pro nil (lib "ell_loxodrome.pro" nil "JHU_APL_IDLUSR") "%s, lng1, lat1" (nil ("ad") ("azi") ("dist") ("help") ("lat2") ("lng2") ("p2")))
   ("all_factors" fun nil (lib "all_factors.pro" nil "JHU_APL_IDLUSR") "Result = %s(num)" (nil ("help")))
   ("swinfo" fun nil (lib "swinfo.pro" nil "JHU_APL_IDLUSR") "Result = %s(ind0)" (nil ("base") ("draw") ("exists") ("help") ("index") ("size") ("swindex") ("title") ("view") ("visible")))
   ("ls2" fun nil (lib "ls2.pro" nil "JHU_APL_IDLUSR") "Result = %s(a, l, u, alo, ahi)" (nil ("help") ("max") ("min") ("missing") ("nbins") ("noscale") ("quiet") ("scale_on") ("wgood") ("wmiss")))
   ("new_range" fun nil (lib "new_range.pro" nil "JHU_APL_IDLUSR") "Result = %s(r, mag, center)" (nil ("help") ("limit")))
   ("img_rotate" fun nil (lib "img_rotate.pro" nil "JHU_APL_IDLUSR") "Result = %s(img, rot)" (nil ("error") ("help")))
   ("img_resize" fun nil (lib "img_resize.pro" nil "JHU_APL_IDLUSR") "Result = %s(img)" (nil ("_extra") ("error") ("help") ("imgmax") ("mag") ("rebin")))
   ("img_smooth" fun nil (lib "img_smooth.pro" nil "JHU_APL_IDLUSR") "Result = %s(img, width)" (nil ("error") ("help")))
   ("clrcontrast" fun nil (lib "clrcontrast.pro" nil "JHU_APL_IDLUSR") "Result = %s(c1, c2)" (nil ("help")))
   ("sundisk" pro nil (lib "sundisk.pro" nil "JHU_APL_IDLUSR") "%s, time, elng0, elat, hlng, hlat" (nil ("absolute") ("debug") ("help")))
   ("wait_bar" pro nil (lib "wait_bar.pro" nil "JHU_APL_IDLUSR") "%s, sec" (nil ("color") ("help") ("tcolor") ("title") ("tsize") ("xoffset") ("xsize") ("yoffset") ("ysize")))
   ("img_radial_test" fun nil (lib "img_radial.pro" nil "JHU_APL_IDLUSR") "Result = %s(img, coeff)" (nil ("xopt")))
   ("img_radial_remap" fun nil (lib "img_radial.pro" nil "JHU_APL_IDLUSR") "Result = %s(img, nx, ny, coeff)" (nil ("last") ("xopt") ("yopt")))
   ("img_radial" fun nil (lib "img_radial.pro" nil "JHU_APL_IDLUSR") "Result = %s(img)" (nil ("blu") ("coeff") ("error") ("grn") ("help") ("red") ("test") ("xopt") ("yopt")))
   ("filelists" pro nil (lib "filelists.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("cnt1") ("cnt2") ("cnt3") ("cnt4") ("cnt5") ("cnt6") ("cnt7") ("cnt8") ("error") ("filter") ("help") ("list1") ("list2") ("list3") ("list4") ("list5") ("list6") ("list7") ("list8") ("prefilter") ("quiet")))
   ("ell_llh2xyz" pro nil (lib "ell_llh2xyz.pro" nil "JHU_APL_IDLUSR") "%s, lng1, lat1, htm, x, y, z" (nil ("ellipsoid") ("help")))
   ("str_drop_punc" fun nil (lib "str_drop_punc.pro" nil "JHU_APL_IDLUSR") "Result = %s(txt)" (nil ("compress") ("help") ("lower") ("upper")))
   ("ell_xyz2llh" pro nil (lib "ell_xyz2llh.pro" nil "JHU_APL_IDLUSR") "%s, x, y, z, lng1, lat1, htm" (nil ("ellipsoid") ("help") ("quiet")))
   ("scalebar" pro nil (lib "scalebar.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("data") ("help") ("icolor") ("image") ("save") ("scaled") ("scolor") ("show") ("size")))
   ("tprint" pro nil (lib "tprint.pro" nil "JHU_APL_IDLUSR") "%s, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15" (nil ("add") ("error") ("help") ("init") ("out") ("print") ("reverse") ("save")))
   ("pointid" pro nil (lib "pointid.pro" nil "JHU_APL_IDLUSR") "%s, x, y, id" (nil ("bottom") ("exit_code") ("help") ("index") ("radius") ("top")))
   ("img_shift" fun nil (lib "img_shift.pro" nil "JHU_APL_IDLUSR") "Result = %s(img, dx, dy)" (nil ("error") ("help")))
   ("winlist" pro nil (lib "winlist.pro" nil "JHU_APL_IDLUSR") "%s, list" (nil ("free") ("help") ("lookback") ("pixlist") ("quiet") ("size_match") ("window_match") ("xpos") ("xsize") ("ypos") ("ysize")))
   ("get_ellipsoid" pro nil (lib "get_ellipsoid.pro" nil "JHU_APL_IDLUSR") "%s, name, ell" (nil ("error") ("help") ("list")))
   ("ellipsoid" pro nil (lib "ellipsoid.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("all") ("current") ("error") ("get") ("help") ("idl") ("set")))
   ("img_shape" pro nil (lib "img_shape.pro" nil "JHU_APL_IDLUSR") "%s, img" (nil ("error") ("help") ("nx") ("ny") ("true")))
   ("ell_polygon" pro nil (lib "ell_polygon.pro" nil "JHU_APL_IDLUSR") "%s, lng, lat, flag" (nil ("help") ("lat2") ("list") ("lng2") ("m") ("step")))
   ("XDISK_EVENT" pro nil (lib "xdisk.pro" nil "JHU_APL_IDLUSR") "%s, ev" (nil))
   ("XDISK" pro nil (lib "xdisk.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("HELP") ("MINDISKSIZE") ("SHOW") ("XSIZE")))
   ("draw" pro "terminator" (lib "terminator__define.pro" nil "JHU_APL_IDLUSR") "Obj ->[%s::]%s, time" (nil ("alt") ("charsize") ("color") ("help") ("linestyle") ("nosun") ("offset") ("thickness") ("xmode")))
   ("set" pro "terminator" (lib "terminator__define.pro" nil "JHU_APL_IDLUSR") "Obj ->[%s::]%s" (nil ("alt") ("charsize") ("color") ("flag") ("help") ("linestyle") ("nosun") ("offset") ("thickness")))
   ("list" pro "terminator" (lib "terminator__define.pro" nil "JHU_APL_IDLUSR") "Obj ->[%s::]%s" (nil))
   ("init" fun "terminator" (lib "terminator__define.pro" nil "JHU_APL_IDLUSR") "Result = Obj ->[%s::]%s" (nil ("alt")))
   ("terminator__define" pro nil (lib "terminator__define.pro" nil "JHU_APL_IDLUSR") "%s" (nil))
   ("utnow" fun nil (lib "utnow.pro" nil "JHU_APL_IDLUSR") "Result = %s" (nil ("help")))
   ("ell_cyl_eq_area" pro nil (lib "ell_cyl_eq_area.pro" nil "JHU_APL_IDLUSR") "%s, lng, lat, area" (nil ("help") ("km") ("long0") ("quiet")))
   ("ell_ll2rb" pro nil (lib "ell_ll2rb.pro" nil "JHU_APL_IDLUSR") "%s, lng1, lat1, lng2, lat2, dist, azi1, azi2" (nil ("help")))
   ("maprings" pro nil (lib "maprings.pro" nil "JHU_APL_IDLUSR") "%s, dist" (nil ("color") ("help") ("lat") ("linestyle") ("lng") ("thickness") ("units")))
   ("img_adjhsv" fun nil (lib "img_adjhsv.pro" nil "JHU_APL_IDLUSR") "Result = %s(img)" (nil ("error") ("help") ("hue") ("sat") ("val")))
   ("ell_rb2ll" pro nil (lib "ell_rb2ll.pro" nil "JHU_APL_IDLUSR") "%s, lng1, lat1, dist, azi1, lng2, lat2, azi2" (nil ("help")))
   ("img_redim" fun nil (lib "img_redim.pro" nil "JHU_APL_IDLUSR") "Result = %s(img)" (nil ("error") ("help") ("nx") ("ny") ("true")))
   ("img_rot" fun nil (lib "img_rot.pro" nil "JHU_APL_IDLUSR") "Result = %s(img, ang, mag, x0, y0)" (nil ("_extra") ("error") ("help")))
   ("img_merge" fun nil (lib "img_merge.pro" nil "JHU_APL_IDLUSR") "Result = %s(c1, c2, c3)" (nil ("error") ("help") ("hsv") ("nx") ("ny") ("true")))
   ("img_subimg" fun nil (lib "img_subimg.pro" nil "JHU_APL_IDLUSR") "Result = %s(img, ix, iy, dx, dy)" (nil ("error") ("help") ("nx") ("ny") ("true")))
   ("image_align" pro nil (lib "image_align.pro" nil "JHU_APL_IDLUSR") "%s, img1, img2" (nil ("help")))
   ("img_insimg" fun nil (lib "img_insimg.pro" nil "JHU_APL_IDLUSR") "Result = %s(base, sub)" (nil ("bwt") ("channels") ("gwt") ("help") ("hix") ("hiy") ("hoff") ("lox") ("loy") ("rwt") ("swt") ("vmix") ("vmult") ("vwt") ("xstart") ("ystart")))
   ("sharpen" fun nil (lib "sharpen.pro" nil "JHU_APL_IDLUSR") "Result = %s(img)" (nil ("help") ("smooth") ("weight")))
   ("radon2" fun nil (lib "radon2.pro" nil "JHU_APL_IDLUSR") "Result = %s(z0)" (nil ("angles") ("debug") ("embed") ("help") ("start") ("step") ("stop")))
   ("tbin" fun nil (lib "tbin.pro" nil "JHU_APL_IDLUSR") "Result = %s(in, val)" (nil ("help")))
   ("stringform" fun nil (lib "stringform.pro" nil "JHU_APL_IDLUSR") "Result = %s(in)" (nil ("format") ("help")))
   ("img_sharpen" fun nil (lib "img_sharpen.pro" nil "JHU_APL_IDLUSR") "Result = %s(img)" (nil ("error") ("help") ("smooth") ("weight")))
   ("img_smooth2" fun nil (lib "img_smooth2.pro" nil "JHU_APL_IDLUSR") "Result = %s(img, width)" (nil ("error") ("help")))
   ("img_smoothc" fun nil (lib "img_smoothc.pro" nil "JHU_APL_IDLUSR") "Result = %s(img, sm)" (nil ("error") ("help") ("width") ("zero")))
   ("img_ice_1ch" pro nil (lib "img_ice.pro" nil "JHU_APL_IDLUSR") "%s, s" (nil))
   ("img_ice_clr" pro nil (lib "img_ice.pro" nil "JHU_APL_IDLUSR") "%s, s" (nil))
   ("img_ice_disp" pro nil (lib "img_ice.pro" nil "JHU_APL_IDLUSR") "%s, cimg, ch, s, xnew, ynew" (nil ("off") ("slp")))
   ("img_ice_mvpt" pro nil (lib "img_ice.pro" nil "JHU_APL_IDLUSR") "%s, s, ixnew, iynew" (nil ("data")))
   ("img_ice_event" pro nil (lib "img_ice.pro" nil "JHU_APL_IDLUSR") "%s, ev" (nil))
   ("img_ice" pro nil (lib "img_ice.pro" nil "JHU_APL_IDLUSR") "%s, img" (nil ("error") ("help") ("labels") ("last") ("restore") ("scale")))
   ("txtputkey" pro nil (lib "txtputkey.pro" nil "JHU_APL_IDLUSR") "%s, file, s" (nil ("help")))
   ("aademo" pro nil (lib "aademo.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("antialias") ("help")))
   ("invinterp" fun nil (lib "invinterp.pro" nil "JHU_APL_IDLUSR") "Result = %s(y, y0)" (nil ("err") ("help") ("x")))
   ("line_fit" pro nil (lib "line_fit.pro" nil "JHU_APL_IDLUSR") "%s, x, y" (nil ("_extra") ("help") ("plot") ("slope") ("weights") ("xm") ("xplot") ("xreg") ("ym") ("yplot") ("yreg")))
   ("img_wclr" fun nil (lib "img_wclr.pro" nil "JHU_APL_IDLUSR") "Result = %s(img)" (nil ("color") ("count") ("error") ("help") ("tol")))
   ("img_cfilter" fun nil (lib "img_cfilter.pro" nil "JHU_APL_IDLUSR") "Result = %s(base, filt)" (nil ("error") ("help") ("wt")))
   ("img_illuminate" fun nil (lib "img_illuminate.pro" nil "JHU_APL_IDLUSR") "Result = %s(base, ill)" (nil ("desat") ("error") ("help") ("wt")))
   ("img_repclr" fun nil (lib "img_repclr.pro" nil "JHU_APL_IDLUSR") "Result = %s(img)" (nil ("clr1") ("clr2") ("count") ("error") ("help") ("tol")))
   ("whichwrd" fun nil (lib "whichwrd.pro" nil "JHU_APL_IDLUSR") "Result = %s(txtstr, sub)" (nil ("delimiter") ("help") ("occur")))
   ("img_clrw" fun nil (lib "img_clrw.pro" nil "JHU_APL_IDLUSR") "Result = %s(img, w)" (nil ("color") ("error") ("help")))
   ("img_spread" fun nil (lib "img_spread.pro" nil "JHU_APL_IDLUSR") "Result = %s(in)" (nil ("help") ("hist") ("missing") ("wgood") ("wmiss")))
   ("three2one" pro nil (lib "three2one.pro" nil "JHU_APL_IDLUSR") "%s, inx, iny, inz, arr, in" (nil ("help")))
   ("img_ce_scale" fun nil (lib "img_ce.pro" nil "JHU_APL_IDLUSR") "Result = %s(in, ch, sc, x_in, x_mn)" (nil))
   ("img_ce" pro nil (lib "img_ce.pro" nil "JHU_APL_IDLUSR") "%s, img, sc" (nil ("display") ("help") ("out")))
   ("month2name" fun nil (lib "month2name.pro" nil "JHU_APL_IDLUSR") "Result = %s(num)" (nil ("full") ("help") ("lower") ("upper")))
   ("image_area_get" pro nil (lib "image_area_get.pro" nil "JHU_APL_IDLUSR") "%s, area" (nil ("error") ("help") ("size")))
   ("xgetvals_event" pro nil (lib "xgetvals.pro" nil "JHU_APL_IDLUSR") "%s, ev" (nil))
   ("xgetvals" pro nil (lib "xgetvals.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("def") ("exit") ("help") ("labels") ("rows") ("sep") ("title") ("vals")))
   ("image_area_set" pro nil (lib "image_area_set.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("area") ("help") ("list") ("set_file") ("size")))
   ("ndim_indices" pro nil (lib "ndim_indices.pro" nil "JHU_APL_IDLUSR") "%s, dims, inds, s" (nil ("error") ("help")))
   ("sw_showpt" pro nil (lib "sw_showpt.pro" nil "JHU_APL_IDLUSR") "%s, x, y" (nil ("help") ("win")))
   ("get_visual_name" pro nil (lib "get_visual_name.pro" nil "JHU_APL_IDLUSR") "%s, vis" (nil ("help")))
   ("decompose" pro nil (lib "decompose.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("get") ("help") ("set")))
   ("xadjcirc_update" pro nil (lib "xadjcirc.pro" nil "JHU_APL_IDLUSR") "%s, s" (nil ("erase") ("ind") ("ix0") ("iy0") ("rad")))
   ("xadjcirc" pro nil (lib "xadjcirc.pro" nil "JHU_APL_IDLUSR") "%s, rad" (nil ("help") ("ix0") ("iy0") ("new")))
   ("img_scale" fun nil (lib "img_scale.pro" nil "JHU_APL_IDLUSR") "Result = %s(img0, sc, par)" (nil ("error") ("help")))
   ("roundn" fun nil (lib "roundn.pro" nil "JHU_APL_IDLUSR") "Result = %s(v1, n)" (nil ("format") ("help") ("string")))
   ("img_point" fun nil (lib "img_point.pro" nil "JHU_APL_IDLUSR") "Result = %s(img, x, y, z)" (nil ("angle") ("antialias") ("clip") ("color") ("data") ("device") ("help") ("normal") ("ocolor") ("sides") ("size") ("t3d") ("thick")))
   ("img_text" fun nil (lib "img_text.pro" nil "JHU_APL_IDLUSR") "Result = %s(img, x, y, txt)" (nil ("_extra") ("align") ("antialiased") ("charsize") ("charthick") ("color") ("data") ("device") ("error") ("help") ("normalized") ("orientation")))
   ("img_plot" fun nil (lib "img_plot.pro" nil "JHU_APL_IDLUSR") "Result = %s(img, x0, y0)" (nil ("_extra") ("antialiased") ("charsize") ("charthick") ("color") ("device") ("error") ("help") ("linestyle") ("nodata") ("position") ("psym") ("symsize") ("thick") ("title") ("xthick") ("xtitle") ("ythick") ("ytitle")))
   ("substruct" fun nil (lib "substruct.pro" nil "JHU_APL_IDLUSR") "Result = %s(s, in)" (nil ("help") ("quiet")))
   ("aaplotp" pro nil (lib "aaplotp.pro" nil "JHU_APL_IDLUSR") "%s, x, y, p" (nil ("_extra") ("help") ("noaa")))
   ("aaplot" pro nil (lib "aaplot.pro" nil "JHU_APL_IDLUSR") "%s, x0, y0" (nil ("_extra") ("help") ("noaa")))
   ("aatext" pro nil (lib "aatext.pro" nil "JHU_APL_IDLUSR") "%s, x, y, txt" (nil ("_extra") ("align") ("charsize") ("help") ("noaa") ("orientation")))
   ("aapoint" pro nil (lib "aapoint.pro" nil "JHU_APL_IDLUSR") "%s, x, y, z" (nil ("_extra") ("help") ("noaa")))
   ("magup" pro "magbub" (lib "magbub__define.pro" nil "JHU_APL_IDLUSR") "Obj ->[%s::]%s" (nil))
   ("magdown" pro "magbub" (lib "magbub__define.pro" nil "JHU_APL_IDLUSR") "Obj ->[%s::]%s" (nil))
   ("show" pro "magbub" (lib "magbub__define.pro" nil "JHU_APL_IDLUSR") "Obj ->[%s::]%s, x0, y0" (nil ("restore")))
   ("adjsize" pro "magbub" (lib "magbub__define.pro" nil "JHU_APL_IDLUSR") "Obj ->[%s::]%s" (nil ("ix0") ("iy0")))
   ("help" pro "magbub" (lib "magbub__define.pro" nil "JHU_APL_IDLUSR") "Obj ->[%s::]%s" (nil ("out")))
   ("list" pro "magbub" (lib "magbub__define.pro" nil "JHU_APL_IDLUSR") "Obj ->[%s::]%s" (nil))
   ("set" pro "magbub" (lib "magbub__define.pro" nil "JHU_APL_IDLUSR") "Obj ->[%s::]%s" (nil ("charsize") ("coordinates") ("frac") ("image") ("mag") ("order") ("smooth") ("width") ("window")))
   ("radial" fun "magbub" (lib "magbub__define.pro" nil "JHU_APL_IDLUSR") "Result = Obj ->[%s::]%s(rr, t)" (nil))
   ("indices" pro "magbub" (lib "magbub__define.pro" nil "JHU_APL_IDLUSR") "Obj ->[%s::]%s" (nil))
   ("cleanup" pro "magbub" (lib "magbub__define.pro" nil "JHU_APL_IDLUSR") "Obj ->[%s::]%s" (nil))
   ("init" fun "magbub" (lib "magbub__define.pro" nil "JHU_APL_IDLUSR") "Result = Obj ->[%s::]%s" (nil))
   ("magbub__define" pro nil (lib "magbub__define.pro" nil "JHU_APL_IDLUSR") "%s" (nil))
   ("reshdr_from_file" pro nil (lib "reshdr_from_file.pro" nil "JHU_APL_IDLUSR") "%s, resfile, txtfile" (nil ("error") ("help")))
   ("res_from_struct" pro nil (lib "res_from_struct.pro" nil "JHU_APL_IDLUSR") "%s, resfile, s" (nil ("error") ("help")))
   ("txtdb_rd" fun nil (lib "txtdb_rd.pro" nil "JHU_APL_IDLUSR") "Result = %s(file)" (nil ("debug") ("error") ("help") ("quiet") ("tab")))
   ("res_to_struct" pro nil (lib "res_to_struct.pro" nil "JHU_APL_IDLUSR") "%s, resfile, s" (nil ("array") ("error") ("help") ("ignore") ("noarray") ("nocomments")))
   ("reshdr_to_file" pro nil (lib "reshdr_to_file.pro" nil "JHU_APL_IDLUSR") "%s, resfile, txtfile" (nil ("error") ("help")))
   ("showtabs" pro nil (lib "showtabs.pro" nil "JHU_APL_IDLUSR") "%s, txt" (nil ("char") ("help")))
   ("typ2num" fun nil (lib "typ2num.pro" nil "JHU_APL_IDLUSR") "Result = %s(input)" (nil ("bits") ("error") ("help") ("quiet")))
   ("txtdb_in" fun nil (lib "txtdb_in.pro" nil "JHU_APL_IDLUSR") "Result = %s(s, in)" (nil ("help")))
   ("ms2js" fun nil (lib "ms2js.pro" nil "JHU_APL_IDLUSR") "Result = %s(ms_time)" (nil ("help")))
   ("xorplot" pro nil (lib "xorplot.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("help") ("init") ("x") ("y")))
   ("swshake" pro nil (lib "swshake.pro" nil "JHU_APL_IDLUSR") "%s, in" (nil ("hard") ("help") ("inside")))
   ("detab_file" pro nil (lib "detab_file.pro" nil "JHU_APL_IDLUSR") "%s, file" (nil ("char") ("dtshow") ("error") ("help") ("nobackup") ("show") ("tab")))
   ("plotshape" pro nil (lib "plotshape.pro" nil "JHU_APL_IDLUSR") "%s, file" (nil ("color") ("devfill") ("error") ("help") ("linestyle") ("noplot") ("number") ("ocolor") ("quiet") ("thick") ("type")))
   ("data_segmod" pro nil (lib "data_segmod.pro" nil "JHU_APL_IDLUSR") "%s, x, lo, hi" (nil ("count") ("help") ("max")))
   ("erasewin" pro nil (lib "erasewin.pro" nil "JHU_APL_IDLUSR") "%s, clr" (nil ("help")))
   ("image_stats" pro nil (lib "image_stats.pro" nil "JHU_APL_IDLUSR") "%s, x1, x2, y10, y20" (nil ("binwidth") ("fact") ("help") ("info") ("init") ("option") ("terminate") ("xpos") ("ypos") ("yrev")))
   ("c_adjhsv" fun nil (lib "c_adjhsv.pro" nil "JHU_APL_IDLUSR") "Result = %s(in)" (nil ("help") ("hue") ("sat") ("val")))
   ("help" pro "iwindow" (lib "iwindow__define.pro" nil "JHU_APL_IDLUSR") "Obj ->[%s::]%s" (nil ("out") ("quiet")))
   ("list" pro "iwindow" (lib "iwindow__define.pro" nil "JHU_APL_IDLUSR") "Obj ->[%s::]%s" (nil ("out")))
   ("get" pro "iwindow" (lib "iwindow__define.pro" nil "JHU_APL_IDLUSR") "Obj ->[%s::]%s" (nil ("help") ("id_draw") ("image") ("mid") ("par") ("raw") ("scaling") ("true") ("view") ("win")))
   ("set" pro "iwindow" (lib "iwindow__define.pro" nil "JHU_APL_IDLUSR") "Obj ->[%s::]%s" (nil ("drag") ("help") ("image") ("par") ("scaling") ("title") ("view") ("x_scroll") ("y_scroll")))
   ("wshow" pro "iwindow" (lib "iwindow__define.pro" nil "JHU_APL_IDLUSR") "Obj ->[%s::]%s" (nil))
   ("iwindow_cleanup" pro nil (lib "iwindow__define.pro" nil "JHU_APL_IDLUSR") "%s, top" (nil))
   ("iwindow_event" pro nil (lib "iwindow__define.pro" nil "JHU_APL_IDLUSR") "%s, ev" (nil))
   ("resize" pro "iwindow" (lib "iwindow__define.pro" nil "JHU_APL_IDLUSR") "Obj ->[%s::]%s, x, y" (nil))
   ("zimg" pro "iwindow" (lib "iwindow__define.pro" nil "JHU_APL_IDLUSR") "Obj ->[%s::]%s" (nil))
   ("zsize" pro "iwindow" (lib "iwindow__define.pro" nil "JHU_APL_IDLUSR") "Obj ->[%s::]%s" (nil))
   ("zreset" pro "iwindow" (lib "iwindow__define.pro" nil "JHU_APL_IDLUSR") "Obj ->[%s::]%s" (nil))
   ("zshow" pro "iwindow" (lib "iwindow__define.pro" nil "JHU_APL_IDLUSR") "Obj ->[%s::]%s, ix, iy" (nil ("restore")))
   ("zdown" pro "iwindow" (lib "iwindow__define.pro" nil "JHU_APL_IDLUSR") "Obj ->[%s::]%s" (nil))
   ("zup" pro "iwindow" (lib "iwindow__define.pro" nil "JHU_APL_IDLUSR") "Obj ->[%s::]%s" (nil))
   ("zctog" pro "iwindow" (lib "iwindow__define.pro" nil "JHU_APL_IDLUSR") "Obj ->[%s::]%s" (nil))
   ("get_id_draw" fun "iwindow" (lib "iwindow__define.pro" nil "JHU_APL_IDLUSR") "Result = Obj ->[%s::]%s" (nil))
   ("list_scale" fun "iwindow" (lib "iwindow__define.pro" nil "JHU_APL_IDLUSR") "Result = Obj ->[%s::]%s" (nil))
   ("togdrag" pro "iwindow" (lib "iwindow__define.pro" nil "JHU_APL_IDLUSR") "Obj ->[%s::]%s" (nil))
   ("getdragxy" pro "iwindow" (lib "iwindow__define.pro" nil "JHU_APL_IDLUSR") "Obj ->[%s::]%s, x, y" (nil))
   ("savedragxy" pro "iwindow" (lib "iwindow__define.pro" nil "JHU_APL_IDLUSR") "Obj ->[%s::]%s, x, y" (nil))
   ("cleardrag" pro "iwindow" (lib "iwindow__define.pro" nil "JHU_APL_IDLUSR") "Obj ->[%s::]%s" (nil))
   ("setdrag" pro "iwindow" (lib "iwindow__define.pro" nil "JHU_APL_IDLUSR") "Obj ->[%s::]%s" (nil))
   ("drag" fun "iwindow" (lib "iwindow__define.pro" nil "JHU_APL_IDLUSR") "Result = Obj ->[%s::]%s" (nil))
   ("settimer" pro "iwindow" (lib "iwindow__define.pro" nil "JHU_APL_IDLUSR") "Obj ->[%s::]%s" (nil))
   ("getxy" pro "iwindow" (lib "iwindow__define.pro" nil "JHU_APL_IDLUSR") "Obj ->[%s::]%s, x, y" (nil))
   ("savexy" pro "iwindow" (lib "iwindow__define.pro" nil "JHU_APL_IDLUSR") "Obj ->[%s::]%s, x, y" (nil))
   ("clearflag" pro "iwindow" (lib "iwindow__define.pro" nil "JHU_APL_IDLUSR") "Obj ->[%s::]%s" (nil))
   ("setflag" pro "iwindow" (lib "iwindow__define.pro" nil "JHU_APL_IDLUSR") "Obj ->[%s::]%s" (nil))
   ("flag" fun "iwindow" (lib "iwindow__define.pro" nil "JHU_APL_IDLUSR") "Result = Obj ->[%s::]%s" (nil))
   ("draw" pro "iwindow" (lib "iwindow__define.pro" nil "JHU_APL_IDLUSR") "Obj ->[%s::]%s" (nil))
   ("scrollsize" pro "iwindow" (lib "iwindow__define.pro" nil "JHU_APL_IDLUSR") "Obj ->[%s::]%s, xsize, ysize, xscr0, yscr0, xscr, yscr" (nil))
   ("cleanup" pro "iwindow" (lib "iwindow__define.pro" nil "JHU_APL_IDLUSR") "Obj ->[%s::]%s" (nil))
   ("init" fun "iwindow" (lib "iwindow__define.pro" nil "JHU_APL_IDLUSR") "Result = Obj ->[%s::]%s(raw)" (nil ("menu") ("x_scroll") ("y_scroll")))
   ("iwindow__define" pro nil (lib "iwindow__define.pro" nil "JHU_APL_IDLUSR") "%s" (nil))
   ("c2hsv" pro nil (lib "c2hsv.pro" nil "JHU_APL_IDLUSR") "%s, c, h, s, v" (nil ("help")))
   ("image_numbers" pro nil (lib "image_numbers.pro" nil "JHU_APL_IDLUSR") "%s, x1, x2, y10, y20" (nil ("fact") ("help") ("init") ("mxpos") ("mypos") ("option") ("pxoff") ("pyoff") ("terminate") ("yrev")))
   ("makez24" fun nil (lib "makez24.pro" nil "JHU_APL_IDLUSR") "Result = %s(nx, ny, w)" (nil ("help") ("lastseed") ("periodic") ("seed")))
   ("numplot" pro nil (lib "numplot.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("array") ("flag") ("help") ("info") ("mxpos") ("mypos") ("pxoff") ("pyoff") ("yreversed")))
   ("typextract" fun nil (lib "typextract.pro" nil "JHU_APL_IDLUSR") "Result = %s(input, offset, bindat)" (nil ("bits") ("error") ("help")))
   ("liner" pro nil (lib "liner.pro" nil "JHU_APL_IDLUSR") "%s" (nil))
   ("color_pick_update_mark" pro nil (lib "color_pick.pro" nil "JHU_APL_IDLUSR") "%s, hue, sat, val, s" (nil))
   ("color_pick_update_bar" pro nil (lib "color_pick.pro" nil "JHU_APL_IDLUSR") "%s, val, s" (nil))
   ("color_pick_update_wheel" pro nil (lib "color_pick.pro" nil "JHU_APL_IDLUSR") "%s, hue, rad, s" (nil))
   ("color_pick_update" pro nil (lib "color_pick.pro" nil "JHU_APL_IDLUSR") "%s, s" (nil))
   ("color_pick_event" pro nil (lib "color_pick.pro" nil "JHU_APL_IDLUSR") "%s, ev" (nil))
   ("color_pick" pro nil (lib "color_pick.pro" nil "JHU_APL_IDLUSR") "%s, new, old0" (nil ("group_leader") ("help") ("title") ("xoffset") ("yoffset")))
   ("imgarr_viewer_disp" pro nil (lib "imgarr_viewer.pro" nil "JHU_APL_IDLUSR") "%s, img, s" (nil))
   ("imgarr_viewer_event" pro nil (lib "imgarr_viewer.pro" nil "JHU_APL_IDLUSR") "%s, ev" (nil))
   ("imgarr_viewer" pro nil (lib "imgarr_viewer.pro" nil "JHU_APL_IDLUSR") "%s, imgarr" (nil ("help") ("order")))
   ("xliner_event" pro nil (lib "xliner.pro" nil "JHU_APL_IDLUSR") "%s, ev" (nil))
   ("xliner" pro nil (lib "xliner.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("addlibs") ("help")))
   ("altazi2radec" pro nil (lib "altazi2radec.pro" nil "JHU_APL_IDLUSR") "%s, alt, azi, js_ut, lng, lat, ra, dec" (nil ("help")))
   ("radec2altazi" pro nil (lib "radec2altazi.pro" nil "JHU_APL_IDLUSR") "%s, ra, dec, js_ut, lng, lat, alt2, azi2" (nil ("help")))
   ("js2gra" fun nil (lib "js2gra.pro" nil "JHU_APL_IDLUSR") "Result = %s(js)" (nil ("help")))
   ("img_map_image" fun nil (lib "img_map_image.pro" nil "JHU_APL_IDLUSR") "Result = %s(img, startx, starty, xsize, ysize)" (nil ("_extra") ("error") ("help") ("nodisplay")))
   ("radec2latlon" pro nil (lib "radec2latlon.pro" nil "JHU_APL_IDLUSR") "%s, ra, dec, js_ut, lat, lon" (nil ("help")))
   ("ifwindow" pro nil (lib "ifwindow.pro" nil "JHU_APL_IDLUSR") "%s, in" (nil ("_extra") ("help") ("xsize") ("ysize")))
   ("gen_alphone" pro nil (lib "gen_alphone.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("dir") ("help") ("out") ("save")))
   ("fix_reslib" pro nil (lib "fix_reslib.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("dir") ("help")))
   ("stk_linreg" pro nil (lib "stk_linreg.pro" nil "JHU_APL_IDLUSR") "%s, xx, yy, m, b, r2" (nil ("help")))
   ("PRECESS_res" pro nil (lib "precess_res.pro" nil "JHU_APL_IDLUSR") "%s, DATE1, RA1, DEC1, DATE2, RA2, DEC2" (nil ("ddec") ("dra") ("help")))
   ("pimod" fun nil (lib "pimod.pro" nil "JHU_APL_IDLUSR") "Result = %s(in)" (nil ("degrees") ("double") ("help")))
   ("complexview" pro nil (lib "complexview.pro" nil "JHU_APL_IDLUSR") "%s, z" (nil ("help") ("keep") ("nx") ("ny")))
   ("plexview" pro nil (lib "plexview.pro" nil "JHU_APL_IDLUSR") "%s, x1, x2, y1, y2" (nil ("fact") ("info") ("init") ("keep") ("nx") ("ny") ("option") ("terminate") ("yrev")))
   ("clr2lum" fun nil (lib "clr2lum.pro" nil "JHU_APL_IDLUSR") "Result = %s(clr)" (nil ("bw") ("help")))
   ("hash_put" pro nil (lib "hash_put.pro" nil "JHU_APL_IDLUSR") "%s, key, val" (nil ("hash") ("help") ("newflag")))
   ("hash_init" pro nil (lib "hash_init.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("collisions") ("hash") ("help") ("key") ("n_main") ("n_over") ("val")))
   ("hash_f" fun nil (lib "hash_f.pro" nil "JHU_APL_IDLUSR") "Result = %s(key)" (nil))
   ("hash_get" fun nil (lib "hash_get.pro" nil "JHU_APL_IDLUSR") "Result = %s(key)" (nil ("error") ("flag") ("hash") ("help") ("index") ("quiet")))
   ("map_arrhd" pro nil (lib "map_arrhd.pro" nil "JHU_APL_IDLUSR") "%s, lng, lat" (nil ("base") ("color") ("fill") ("heading") ("help") ("label") ("lalign") ("lcolor") ("length") ("loffset") ("lorient") ("lsize") ("lthick") ("shape") ("thickness") ("units")))
   ("hash_stats" pro nil (lib "hash_stats.pro" nil "JHU_APL_IDLUSR") "%s, h" (nil ("help")))
   ("futil" pro nil (lib "futil.pro" nil "JHU_APL_IDLUSR") "%s, filename" (nil ("chmod") ("copy") ("delete") ("err") ("help") ("move") ("octstr") ("quiet") ("to")))
   ("hash_list" pro nil (lib "hash_list.pro" nil "JHU_APL_IDLUSR") "%s, h" (nil ("help") ("outkeys") ("outvals") ("quiet") ("values")))
   ("save_named" pro nil (lib "save_named.pro" nil "JHU_APL_IDLUSR") "%s, t1, t2, t3, t4, t5, t6, t7, t8, t9" (nil ("error") ("filename") ("help")))
   ("restore_named" pro nil (lib "restore_named.pro" nil "JHU_APL_IDLUSR") "%s, file, t1, t2, t3, t4, t5, t6, t7, t8, t9" (nil ("error") ("help")))
   ("img_thicken" pro nil (lib "img_thicken.pro" nil "JHU_APL_IDLUSR") "%s, img, clr" (nil ("bold") ("help") ("mask") ("nocenter") ("quiet") ("substitute")))
   ("check_shapefile" pro nil (lib "check_shapefile.pro" nil "JHU_APL_IDLUSR") "%s, file" (nil ("help")))
   ("newsweb" pro nil (lib "newsweb.pro" nil "JHU_APL_IDLUSR") "%s" (nil))
   ("win_size_shape" pro nil (lib "win_size_shape.pro" nil "JHU_APL_IDLUSR") "%s, nx, ny" (nil ("device") ("help") ("maximg") ("position") ("xmar1") ("xmar2") ("xwin") ("ymar1") ("ymar2") ("ywin")))
   ("wrap_plot" pro nil (lib "wrap_plot.pro" nil "JHU_APL_IDLUSR") "%s, x0, y0" (nil ("_extra") ("help")))
   ("png_mag" pro nil (lib "png_mag.pro" nil "JHU_APL_IDLUSR") "%s, list" (nil ("_extra") ("help") ("mag") ("prefix") ("quiet") ("rotate") ("smooth")))
   ("m_put" pro nil (lib "m_put.pro" nil "JHU_APL_IDLUSR") "%s, tag0, val" (nil ("area") ("clear") ("default") ("error") ("help") ("quiet")))
   ("jpg_mag" pro nil (lib "jpg_mag.pro" nil "JHU_APL_IDLUSR") "%s, list" (nil ("_extra") ("help") ("mag") ("prefix") ("qual") ("quiet") ("rotate") ("smooth")))
   ("tag_value" fun nil (lib "tag_value.pro" nil "JHU_APL_IDLUSR") "Result = %s(ss, tag)" (nil ("error") ("help")))
   ("tag_drop" fun nil (lib "tag_drop.pro" nil "JHU_APL_IDLUSR") "Result = %s(ss, tag)" (nil ("help")))
   ("m_list" pro nil (lib "m_list.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("all") ("area") ("default") ("help") ("out") ("quiet")))
   ("m_get" pro nil (lib "m_get.pro" nil "JHU_APL_IDLUSR") "%s, tag0, val" (nil ("area") ("default") ("error") ("help") ("quiet")))
   ("m_fun" fun nil (lib "m_fun.pro" nil "JHU_APL_IDLUSR") "Result = %s(tag0, val)" (nil ("area") ("default") ("error") ("help") ("quiet")))
   ("zpan2" pro nil (lib "zpan2.pro" nil "JHU_APL_IDLUSR") "%s, ix1, iy1" (nil ("help") ("inwindow") ("keep") ("magwin") ("size") ("xpos") ("ypos") ("zoom")))
   ("multiband" fun nil (lib "multiband.pro" nil "JHU_APL_IDLUSR") "Result = %s(in)" (nil ("help") ("hue") ("wt")))
   ("trapi" fun nil (lib "trapi.pro" nil "JHU_APL_IDLUSR") "Result = %s(x, y)" (nil ("cumulative") ("double") ("help")))
   ("window_drift" pro nil (lib "window_drift.pro" nil "JHU_APL_IDLUSR") "%s, dx, dy" (nil ("help") ("measure")))
   ("map_proj_name" fun nil (lib "map_proj_name.pro" nil "JHU_APL_IDLUSR") "Result = %s(proj)" (nil ("help")))
   ("load_colors" pro nil (lib "load_colors.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("help")))
   ("test" pro nil (lib "test.pro" nil "JHU_APL_IDLUSR") "%s" (nil))
   ("pixsplit" pro nil (lib "pixsplit.pro" nil "JHU_APL_IDLUSR") "%s, img, ix, iy, val" (nil ("help") ("nn")))
   ("st2fips" fun nil (lib "st2fips.pro" nil "JHU_APL_IDLUSR") "Result = %s(st)" (nil ("help") ("list") ("name") ("state")))
   ("xresget2" pro nil (lib "xresget2.pro" nil "JHU_APL_IDLUSR") "%s, out, file" (nil ("dir") ("help")))
   ("fips2st" fun nil (lib "fips2st.pro" nil "JHU_APL_IDLUSR") "Result = %s(fips)" (nil ("help") ("list") ("name")))
   ("county_fips" fun nil (lib "county_fips.pro" nil "JHU_APL_IDLUSR") "Result = %s(st0)" (nil ("help") ("list") ("name")))
   ("datum_nad27_to_wsg82" pro nil (lib "datum_nad27_to_wsg82.pro" nil "JHU_APL_IDLUSR") "%s, lng, lat, ht" (nil ("help")))
   ("tbin2d" fun nil (lib "tbin2d.pro" nil "JHU_APL_IDLUSR") "Result = %s(arr, ix, iy, val)" (nil ("help")))
   ("resedit" pro nil (lib "resedit.pro" nil "JHU_APL_IDLUSR") "%s, file, tag, new_val" (nil ("error") ("help") ("quiet")))
   ("hash_example" pro nil (lib "hash_example.pro" nil "JHU_APL_IDLUSR") "%s, file" (nil ("help")))
   ("dimsz" fun nil (lib "dimsz.pro" nil "JHU_APL_IDLUSR") "Result = %s(arr, dim)" (nil ("help")))
   ("shapefile_pts" pro nil (lib "shapefile_pts.pro" nil "JHU_APL_IDLUSR") "%s, file, lng, lat, pen" (nil ("bbox") ("help") ("type")))
   ("llsigned" fun nil (lib "llsigned.pro" nil "JHU_APL_IDLUSR") "Result = %s(txt)" (nil ("help")))
   ("ellipsoid_int_demo" pro nil (lib "ellipsoid_int_demo.pro" nil "JHU_APL_IDLUSR") "%s" (nil))
   ("roi_pick" pro nil (lib "roi_pick.pro" nil "JHU_APL_IDLUSR") "%s, txt" (nil ("help") ("single") ("title")))
   ("roi_indices" fun nil (lib "roi_indices.pro" nil "JHU_APL_IDLUSR") "Result = %s(txt, nx, ny)" (nil ("help") ("px") ("py")))
   ("list_doy" pro nil (lib "list_doy.pro" nil "JHU_APL_IDLUSR") "%s, date0" (nil ("help") ("number") ("out") ("quiet") ("reverse")))
   ("rescopy" pro nil (lib "rescopy.pro" nil "JHU_APL_IDLUSR") "%s, resfile, resfile2" (nil ("debug") ("error") ("front") ("help") ("ignore") ("nocomments") ("time_tag")))
   ("tvtest" pro nil (lib "tvtest.pro" nil "JHU_APL_IDLUSR") "%s" (nil ("v")))
   ("polyfilltr" pro nil (lib "polyfilltr.pro" nil "JHU_APL_IDLUSR") "%s, x, y, pen" (nil ("color") ("data") ("device") ("fill") ("help") ("illuminate") ("inverse") ("normal") ("ocolor") ("smooth") ("thick") ("wt")))
   ("polyfillp" pro nil (lib "polyfillp.pro" nil "JHU_APL_IDLUSR") "%s, x, y, p0" (nil ("_extra") ("help")))))
